/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.awt.event.*;

public class ElementDialog extends Dialog
{
	Kaes parent = null;
	
	public ElementDialog(Kaes parent, boolean modal)
	{
		super(parent, modal);
		this.parent = parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setVisible(false);
		setSize(294,166);
		Group1 = new CheckboxGroup();
		spouseButton = new java.awt.Checkbox("Spouse", Group1, false);
		spouseButton.setBounds(191,128,99,28);
		add(spouseButton);
		generatorButton = new java.awt.Checkbox("Generator", Group1, true);
		generatorButton.setBounds(191,97,99,28);
		add(generatorButton);
		identityButton = new java.awt.Checkbox("Identity", Group1, false);
		identityButton.setBounds(191,66,99,28);
		add(identityButton);
		itemLabel = new java.awt.Label("Generator");
		itemLabel.setBounds(11,62,74,31);
		add(itemLabel);
		itemField = new java.awt.TextField();
		itemField.setBounds(90,60,43,35);
		itemField.setFont(new Font("Serif", Font.PLAIN, 14));
		add(itemField);
		messageArea = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_NONE);
		messageArea.setEditable(false);
		messageArea.setBounds(7,4,272,49);
		add(messageArea);
		cancelButton = new java.awt.Button();
		cancelButton.setLabel("Cancel");
		cancelButton.setBounds(6,135,60,23);
		add(cancelButton);
		okButton = new java.awt.Button();
		okButton.setLabel("OK");
		okButton.setBounds(114,134,60,23);
		add(okButton);
		helpButton = new java.awt.Button();
		helpButton.setLabel("Help");
		helpButton.setBounds(113,100,60,23);
		add(helpButton);
		setTitle("ElementDialog");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		helpButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		okButton.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		identityButton.addItemListener(lSymItem);
		generatorButton.addItemListener(lSymItem);
		spouseButton.addItemListener(lSymItem);
		//}}
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


	public ElementDialog(Kaes parent, String title, boolean modal)
	{
		this(parent, modal);
		this.parent = parent;
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Checkbox spouseButton;
	CheckboxGroup Group1;
	java.awt.Checkbox generatorButton;
	java.awt.Checkbox identityButton;
	java.awt.Label itemLabel;
	java.awt.TextField itemField;
	java.awt.TextArea messageArea;
	java.awt.Button cancelButton;
	java.awt.Button okButton;
	java.awt.Button helpButton;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == ElementDialog.this)
				ElementDialog_WindowClosing(event);
		}
	}
	
	void ElementDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == helpButton)
				helpButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
			else if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	void helpButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the ElementDialog
		setEnabled(true);
		//}}
	}

	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Show the ElementDialog
		setVisible(false);
		theElement=oldElement;
		setElementType(oldElementType);
		ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"Cancel");
		parent.elementDialog_ActionPerformed(a);
		//}}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Toggle show/hide
		setVisible(false);
		ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"OK");
		parent.elementDialog_ActionPerformed(a);
		//}}
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == identityButton)
				identityButton_ItemStateChanged(event);
			else if (object == generatorButton)
				generatorButton_ItemStateChanged(event);
			else if (object == spouseButton)
				spouseButton_ItemStateChanged(event);
		}
	}

	void identityButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText(identityButton.getLabel());
		elementType = IDENTITY;
		identityButton.setState(true);
		//}}
	}

	void generatorButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText(generatorButton.getLabel());
		elementType = GENERATOR;
		generatorButton.setState(true);
		//}}
	}

	void spouseButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText(spouseButton.getLabel());
		elementType = SPOUSE;
		spouseButton.setState(true);

		//}}
	}
	
	public int getElementType() {
		return elementType;
	}
	
	public void setElementType(int t) {
		switch (t) {
			case IDENTITY: identityButton_ItemStateChanged(null);
							break;
			case GENERATOR: generatorButton_ItemStateChanged(null);
							break;
			case SPOUSE: spouseButton_ItemStateChanged(null);
							break;
		}
	}
	
	public String getElement() {
		return theElement;
	}
	
	public void setMessage(String s) {
		messageArea.setText(s);
	}
	
	public void doDialog() {
		oldElement=theElement;
		oldElementType=elementType;
		theElement = "";
		itemField.setText("");
		setElementType(elementType);
		this.show();
	}
	
	public final static int IDENTITY = 1;
	public final static int GENERATOR = 2;
	public final static int SPOUSE = 3;
	
	int elementType = GENERATOR;
	int oldElementType = 0;
	
	String theElement="";
	String oldElement="";
	
	
}
