/*
	A basic extension of the java.awt.Dialog class
 */

import java.awt.*;
import java.awt.event.*;

public class PreferencesDialog extends Dialog
{
	Preferences prefs = null;
	StringVector prefkeys = null;
	
	public PreferencesDialog(Frame parent, Preferences prefs, boolean modal)
	{
		super(parent, modal);
		//this.setParent(parent);
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setVisible(false);
		setSize(600,600);
		prefkeys = getPrefKeys(prefs);
		this.prefs = prefs;
		int x = prefkeys.size() +2;
	//	setLayout(new GridLayout(x,1));
		setLayout(new FlowLayout());
		for (int i=0;i<prefkeys.size();i++) {
			String key = (String) prefkeys.elementAt(i);
			String kname = makeName(key);
			Panel p = new Panel();
			p.setLayout(new FlowLayout());
			Label l = new Label(kname);
			Object o = prefs.get(key);
		/*	if (o instanceof StringVector) {
				
			} else {
				
			}*/
			TextField t = new TextField(prefs.getString(key));
			p.add(l);p.add(t);add(p);
		}

		Panel p = new Panel();
		p.setLayout(new FlowLayout());
		cancelButton = new java.awt.Button();
		cancelButton.setLabel("Cancel");
		cancelButton.setBounds(6,135,60,23);
		p.add(cancelButton);
		okButton = new java.awt.Button();
		okButton.setLabel("OK");
		okButton.setBounds(114,134,60,23);
		p.add(okButton);
		helpButton = new java.awt.Button();
		helpButton.setLabel("Help");
		helpButton.setBounds(113,100,60,23);
		p.add(helpButton);
		add(p);
		setTitle("Preferences");
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		helpButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		okButton.addActionListener(lSymAction);
	//	SymItem lSymItem = new SymItem();
	//	identityButton.addItemListener(lSymItem);
	//	generatorButton.addItemListener(lSymItem);
	//	spouseButton.addItemListener(lSymItem);
		//}}
	}
	
	public StringVector getPrefKeys(Preferences prefs) {
		QSort qs = new QSort();
		int [] indices;
		StringVector v = new StringVector();
		StringVector ret = new StringVector();
		java.util.Enumeration keys = prefs.keys();
		for(;keys.hasMoreElements();) {
			String p = (String) keys.nextElement();
			v.addElement(p);
		}
		try {
			indices = qs.sort(v);
			for (int i=0;i<indices.length;i++) {
				ret.addElement(v.elementAt(indices[i]));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return ret;
	}
	
	public String makeName(String in) {
		StringBuffer k = new StringBuffer(in);
		for(int i=0;i<in.length();i++) {
			if (in.charAt(i) == '_') k.setCharAt(i,' ');
		}
		return k.toString();
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

/*
	public ElementDialog(Kaes parent, String title, boolean modal)
	{
		this(parent, modal);
		this.parent = parent;
		setTitle(title);
	}
*/
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			Rectangle bounds = getParent().getBounds();
			Rectangle abounds = getBounds();
	
			setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
				 bounds.y + (bounds.height - abounds.height)/2);
		}
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Checkbox spouseButton;
	CheckboxGroup Group1;
	java.awt.Checkbox generatorButton;
	java.awt.Checkbox identityButton;
	java.awt.Label itemLabel;
	java.awt.TextField itemField;
	java.awt.TextArea messageArea;
	java.awt.Button cancelButton;
	java.awt.Button okButton;
	java.awt.Button helpButton;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == PreferencesDialog.this)
				PreferencesDialog_WindowClosing(event);
		}
	}
	
	void PreferencesDialog_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false); // need to destroy these windows
		dispose();			// free the system resources
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == helpButton)
				helpButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
			else if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	void helpButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the ElementDialog
		setEnabled(true);
		//}}
	}

	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Show the ElementDialog
		setVisible(false);
		//theElement=oldElement;
		//setElementType(oldElementType);
		//ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"Cancel");
		//((Kaes)getParent()).elementDialog_ActionPerformed(a);
		//}}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Toggle show/hide
		Component components[] = getComponents();
		for (int i = 0; i < components.length-1; i++)
		{
			Panel c = (Panel) components[i];
			String g = prefkeys.getSymbol(i);
			if (c.countComponents() > 2) {
				TextField t = (TextField) c.getComponent(1);
				prefs.put(g,t.getText());
			} else {
				TextField t = (TextField) c.getComponent(1);
				prefs.put(g,t.getText());
			}
			
		}
		
		setVisible(false);
		//ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"OK");
		// ((Kaes)getParent()).elementDialog_ActionPerformed(a);
		//}}
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
	/*		if (object == identityButton)
				identityButton_ItemStateChanged(event);
			else if (object == generatorButton)
				generatorButton_ItemStateChanged(event);
			else if (object == spouseButton)
				spouseButton_ItemStateChanged(event); */
		}
	}


	public void doDialog() {
		this.show();
	}
	
	
	
}
