/*
	A basic extension of the java.awt.Dialog class
 */

/* History
* 2/16/01 DR added workaround to equationArea_KeyTyped to get the = key recognized
* added listener itemField.addKeyListener(aSymKey);
* change label activation to key press rather than mouse click
* Java added SymComponent aSymComponent = new SymComponent(); this.addComponentListener(aSymComponent); to code
* modified printed output
* debugged procedure "okButton_ActionPerformed"
* 2/22 DR added "equationArea.setBackground(new Color(16777215));"; 2/23 removed as it seems to cause problems
* activated procedure "enterSpouseTerm"
* 2/25 DR added check in enterSpousTerm to activate
* the top panel if a spouse term has been added to the algebra (needs further work to identify the 
* "main" maps that need to be associated with algebras)
* 3/2 DR added check for "F" and "M" in okButton_ActionPerformed
*/

import java.awt.*;
import java.awt.event.*;

public class EquationPanel extends Panel
{
	Kaes parent = null;
	
	public void setParent(Kaes p) {
		parent = p;
	}
	
	public EquationPanel()
	{
		this.parent = parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(495,327);
		add(currentEquations);
		currentEquations.setBounds(310,112,173,161);
		label7.setText("Elements");
		add(label7);
		label7.setFont(new Font("Serif", Font.BOLD, 12));
		label7.setBounds(4,86,60,17);
		label3.setText("Elements");
		add(label3);
		label3.setFont(new Font("Serif", Font.BOLD, 12));
		label3.setBounds(4,49,60,17);
		currentElementsField.setEditable(false);
		add(currentElementsField);
		currentElementsField.setBounds(73,37,181,26);
		explanation.setEditable(false);
		add(explanation);
		explanation.setBounds(309,9,174,90);
		spouseButton.setCheckboxGroup(Group1);
		spouseButton.setLabel("Spouse");
		add(spouseButton);
		spouseButton.setBounds(184,185,99,28);
		generatorButton.setCheckboxGroup(Group1);
		generatorButton.setState(true);
		generatorButton.setLabel("Generator");
		add(generatorButton);
		generatorButton.setBounds(86,185,99,28);
		identityButton.setCheckboxGroup(Group1);
		identityButton.setLabel("Identity");
		add(identityButton);
		identityButton.setBounds(4,185,99,28);
		itemLabel.setText("New Generator");
		itemLabel.setAlignment(java.awt.Label.RIGHT);
		add(itemLabel);
		itemLabel.setForeground(java.awt.Color.red);
		itemLabel.setFont(new Font("Serif", Font.BOLD, 12));
		itemLabel.setBounds(4,161,94,24);
		add(itemField);
		itemField.setFont(new Font("Serif", Font.PLAIN, 14));
		itemField.setBounds(105,160,38,25);
		equationArea.setEditable(false);
		add(equationArea);
		equationArea.setBounds(73,115,223,26);
		cancelButton.setLabel("Cancel");
		add(cancelButton);
		cancelButton.setBounds(326,290,60,23);
		add(okButton);
		okButton.setBackground(java.awt.Color.white);
		okButton.setForeground(java.awt.Color.black);
		okButton.setBounds(151,146,150,32);
		helpButton.setLabel("Help");
		add(helpButton);
		helpButton.setBounds(420,287,60,23);
		label2.setText("Enter Equations");
		add(label2);
		label2.setForeground(java.awt.Color.blue);
		label2.setFont(new Font("Dialog", Font.PLAIN, 12));
		label2.setBounds(4,2,123,22);
		label4.setText("Equation");
		add(label4);
		label4.setForeground(java.awt.Color.blue);
		label4.setFont(new Font("Serif", Font.BOLD, 12));
		label4.setBounds(4,128,60,17);
		label5.setText("Available");
		add(label5);
		label5.setFont(new Font("Serif", Font.BOLD, 12));
		label5.setBounds(4,72,60,17);
		label6.setText("New");
		add(label6);
		label6.setForeground(java.awt.Color.blue);
		label6.setFont(new Font("Serif", Font.BOLD, 12));
		label6.setBounds(4,117,60,17);
		availableElementsField.setEditable(false);
		add(availableElementsField);
		availableElementsField.setBounds(73,72,158,26);
		label8.setText("Current");
		add(label8);
		label8.setFont(new Font("Serif", Font.BOLD, 12));
		label8.setBounds(4,35,60,17);
		//}}

		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		helpButton.addActionListener(lSymAction);
		cancelButton.addActionListener(lSymAction);
		okButton.addActionListener(lSymAction);
		SymItem lSymItem = new SymItem();
		identityButton.addItemListener(lSymItem);
		generatorButton.addItemListener(lSymItem);
		spouseButton.addItemListener(lSymItem);
		SymKey aSymKey = new SymKey();
		equationArea.addKeyListener(aSymKey);
		itemField.addKeyListener(aSymKey);
		SymMouse aSymMouse = new SymMouse();
		itemField.addMouseListener(aSymMouse);
		equationArea.addMouseListener(aSymMouse);
		this.addKeyListener(aSymKey);
		SymComponent aSymComponent = new SymComponent();
		this.addComponentListener(aSymComponent);
		//}}
		
	}
	
	public void addNotify()
	{
  	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();

		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;


	//{{DECLARE_CONTROLS
	java.awt.TextArea currentEquations = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_VERTICAL_ONLY);
	java.awt.Label label7 = new java.awt.Label();
	java.awt.Label label3 = new java.awt.Label();
	java.awt.TextField currentElementsField = new java.awt.TextField();
	java.awt.TextArea explanation = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_NONE);
	java.awt.Checkbox spouseButton = new java.awt.Checkbox();
	java.awt.CheckboxGroup Group1 = new java.awt.CheckboxGroup();
	java.awt.Checkbox generatorButton = new java.awt.Checkbox();
	java.awt.Checkbox identityButton = new java.awt.Checkbox();
	java.awt.Label itemLabel = new java.awt.Label();
	java.awt.TextField itemField = new java.awt.TextField();
	java.awt.TextArea equationArea = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_NONE);
	java.awt.Button cancelButton = new java.awt.Button();
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button helpButton = new java.awt.Button();
	java.awt.Label label2 = new java.awt.Label();
	java.awt.Label label4 = new java.awt.Label();
	java.awt.Label label5 = new java.awt.Label();
	java.awt.Label label6 = new java.awt.Label();
	java.awt.TextField availableElementsField = new java.awt.TextField();
	java.awt.Label label8 = new java.awt.Label();
	//}}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == helpButton)
				helpButton_ActionPerformed(event);
			else if (object == cancelButton)
				cancelButton_ActionPerformed(event);
			else if (object == okButton)
				okButton_ActionPerformed(event);
		}
	}

	void helpButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Enable the EquationDialog
		setEnabled(true);
		//}}
	}

	void cancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Show the EquationDialog
		//setVisible(false);
		theElement=oldElement;
		setElementType(oldElementType);
		//ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"Cancel");
		//parent.elementDialog_ActionPerformed(a);
		//}}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (okButton.getLabel().equals("Confirm Equation")) {
			String t;
			char[] c= new char[2];
			int ci=1;
			Algebra a = Algebra.getCurrent();
			if (equationArea.getText().length() == 0) {
				explanation.setText("You have not typed an equation in yet. "+
						"If you were intending to confirm an element, click the "+
						"mouse pointer in the element entry field");
				return;
			}
			Equation e = new Equation();
			c = lhs.toString().toCharArray();
			for(int i=lhs.length()-1;i>=0;i--) {
			    if (Character.isLowerCase(c[i])) {
			        ci++;   
			    }else{
				    e.addLhs(new String(c,i,ci));
				    ci = 1;
			    }
			}
			c = rhs.toString().toCharArray();
			ci = 1;
			for(int i=rhs.length()-1;i>=0;i--) {
			    if (Character.isLowerCase(c[i])) {
			        ci++;   
			    }else{
				    e.addRhs(new String(c,i,ci));
				    ci = 1;
			    }
			}
			a.addEquation(e);
			equationArea.setText("");
			explanation.setText("The equation, "+lhs+"="+rhs+", has been added to the algebra.");
			okButton.setLabel("");
		} else {
			Algebra a = Algebra.getCurrent();
			String cand = itemField.getText();
			int l = cand.length();
			if (l == 0) {
				explanation.setText("You have not typed an element in yet. "+
						"If you were intending to confirm an equation, click the "+
						"mouse pointer in the equation entry field");
						return;
			} else if (l > 2) {
				explanation.setText("Your element is more than two letters long. "+
						"Element references must be one or two letters long, the "+
						"first an uppercase letter, the optional second a lowercase letter.");
						return;
			} else if (l == 2) {
				if (!Character.isLowerCase(cand.charAt(1)) ||
					!Character.isUpperCase(cand.charAt(0))) {
				explanation.setText("The second letter of your element is not lowercase. "+
						"Element references must be one or two letters long, the "+
						"first an uppercase letter, the optional second a lowercase letter.");
						return;
				}
			} else if (l == 1) {
				if (!Character.isUpperCase(cand.charAt(0))) {
				explanation.setText("The first letter of your element is not upperrcase. "+
						"Element references must be one or two letters long, the "+
						"first an uppercase letter, the optional second a lowercase letter.");
						return;
				} else if ((cand.charAt(0) == 'F') || (cand.charAt(0) == 'M')) {
			        explanation.setText(cand+" is a special symbol and cannot be used as a generator name. "+
			            "Please enter a new element name.");
			            return;
				}
			}
			else if (a.findElement(cand) != null) {
				explanation.setText("This element has already been entered. "+
						"Please enter a new element name.");
						return;
			}

			AlgebraSymbol s = a.getElement(cand);
			switch (elementType) {
				case GENERATOR: a.addGenerator(s);
				                explanation.setText("The generator, "+s+", has been entered into the algebra.");
				                okButton.setLabel("");
								break;
				case IDENTITY: a.addIdentityElement(s);
								identityButton.setState(false);
								generatorButton_ItemStateChanged(null);
								identityButton.enable(false);
				                explanation.setText("The identity element, "+s+", has been entered into the algebar.");
				                okButton.setLabel("");
								break;
				case SPOUSE:    //a.addSpouseElement(s);
				                if (a.enterSpouseTerm(cand)) {
		                            KintermFrame fr = (KintermFrame) GlobalWindowManager.getCurrentWindow();
                                    if (fr != null)	{fr.activateCurrentMapPanel(KintermEditObject.SPOUSE);}                 
				                }
				                
				                explanation.setText("The spouse element, "+s+", has been entered into the algebra.");
				                okButton.setLabel("");
								break;
			}
			itemField.setText("");
		}
		doDialog();
	}
	
	AlgebraSymbolVector tlhs = null;
	AlgebraSymbolVector trhs = null;

	public void unpackEquation() {
		tlhs = new AlgebraSymbolVector(5,1);
		trhs = new AlgebraSymbolVector(5,1);
		
		String t;
		char[] c = new char[2];
		int ci=0;
		Algebra a = Algebra.getCurrent();

		for(int i=0;i<lhs.length();i++,ci=0) {
			c[ci] = lhs.charAt(i);
			if (i+1 < lhs.length()) 
				if (Character.isLowerCase(lhs.charAt(i+1))) {
					c[++ci]=lhs.charAt(++i);
				}
			tlhs.addElement(a.getElement(new String(c,0,ci)));
		}
		for(int i=0;i<rhs.length();i++,ci=0) {
			c[ci] = rhs.charAt(i);
			if (i+1 < rhs.length()) 
				if (Character.isLowerCase(rhs.charAt(i+1))) {
					c[++ci]=rhs.charAt(++i);
				}
			trhs.addElement(a.getElement(new String(c,0,ci)));
		}
	}
	
	public void populateFields() {
		populateCurrentSymbols();
		populateAvailableSymbols();
		populateCurrentEquations();
	}	
	
	/** puts current equations in the currentEquations Field
	*/
	
	public void populateCurrentEquations() {
        String s = "";
		//Algebra a = Algebra.getCurrent();
		currentEquations.setText("");
		EquationVector v = Algebra.getCurrent().getEquations();
		for(v.reset();v.isNext();) {
		    String s1 = v.getNext().toText();		     
            if (s1 != "")
			    s = s + s1+ XFile.Eol;		    
		}
		currentEquations.setText(s);
		currentEquations.repaint();
	}

    public String equationStringToText(String s) {
        String t = s.replace('[', ' ').replace(']',' ').replace(':', '=').replace(',',' ').trim();
        return t;
    }

	/** puts current symbols in the currentElements Field
	*/
	public void populateCurrentSymbols() {
		Algebra a = Algebra.getCurrent();
		AlgebraSymbolVector k = a.getElements();
		currentElementsField.setText("");
		String s="";
		for(int i=0;i<k.size();i++) {
			s = s + k.getSymbol(i).getValue()+" ";
		}
		currentElementsField.setText(s);
		currentElementsField.repaint();
	}
	/** puts available symbols in the availableElements Field
	*/
	
	public void populateAvailableSymbols() {
		Algebra a = Algebra.getCurrent();
		AlgebraSymbolVector k = a.getElements();
		availableElementsField.setText("");
		unpackEquation();
		String s="";
		AlgebraSymbol q;
		for(int i=0;i<k.size();i++) {
			q = k.getSymbol(i);
			if (isLHS) {
				if (q.isIdentityElement()) continue;
				if (q.getValue().equals("0")) continue;
				s = s + q.getValue()+" ";
			} else {
				if (q.isIdentityElement()) {
					if (rhs.length() != 0) continue;
					s = s + q.getValue()+" ";
				} else if (q.getValue().equals("0")) {
					if (rhs.length() != 0) continue;
					s = s + q.getValue()+" ";
				} else if (trhs.size() == 1) {
					if (trhs.getSymbol(0).isIdentityElement()) continue;
					if (trhs.getSymbol(0).getValue().equals("0")) continue;
					s = s + q.getValue()+" ";
				} else {
					s = s + q.getValue()+" ";
				}
			}
		}
		availableElementsField.setText(s);
		availableElementsField.repaint();

	}
		// Toggle show/hide
		//setVisible(false);
		//ActionEvent a = new ActionEvent(this,ActionEvent.ACTION_PERFORMED,"OK");
		//parent.elementDialog_ActionPerformed(a);
		//}}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == identityButton)
				identityButton_ItemStateChanged(event);
			else if (object == generatorButton)
				generatorButton_ItemStateChanged(event);
			else if (object == spouseButton)
				spouseButton_ItemStateChanged(event);
		}
	}

	void identityButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText("New "+identityButton.getLabel());
		elementType = IDENTITY;
		identityButton.setState(true);
		//}}
	}

	void generatorButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText("New "+generatorButton.getLabel());
		elementType = GENERATOR;
		generatorButton.setState(true);
		//}}
	}

	void spouseButton_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the text for Label Get the RadioButton's label
		itemLabel.setText("New "+spouseButton.getLabel());
		elementType = SPOUSE;
		spouseButton.setState(true);

		//}}
	}
	
	public int getElementType() {
		return elementType;
	}
	
	public void setElementType(int t) {
		switch (t) {
			case IDENTITY: identityButton_ItemStateChanged(null);
							break;
			case GENERATOR: generatorButton_ItemStateChanged(null);
							break;
			case SPOUSE: spouseButton_ItemStateChanged(null);
							break;
		}
	}
	
	public String getElement() {
		return theElement;
	}
	
	public void setMessage(String s) {
		equationArea.setText(s);
	}
	
	public void doDialog() {
		oldElement=theElement;
		oldElementType=elementType;
		theElement = "";
		// itemField.setText("");
		setElementType(elementType);
		
		//	isEQUAL=false;
		//	isLHS = true;
		lhs="";
		rhs="";
		populateAvailableSymbols();
		populateCurrentSymbols();
		populateCurrentEquations();
		//explanation.setText("Open a kin term map or enter an algebraic element (generator, identity or spouse element).");


		// this.show();
	}
	
	public final static int IDENTITY = 1;
	public final static int GENERATOR = 2;
	public final static int SPOUSE = 3;
	
	int elementType = GENERATOR;
	int oldElementType = 0;
	
	String theElement="";
	String oldElement="";
	
	

	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();

			
			if (object == itemField)
				itemField_KeyTyped(event);
			
			
			if (object == equationArea)
				equationArea_KeyTyped(event);
			else if (object == EquationPanel.this)
				EquationPanel_KeyPressed(event);
		}
	}

	String lhs, rhs;

	void equationArea_KeyTyped(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Append string in TextArea Get the selected text
		String lhsAllowed = availableElementsField.getText(); // "CPI";
		String rhsAllowed = availableElementsField.getText(); // "CPI";
		int c = event.getKeyCode();
		if (c != event.VK_SHIFT)
		    okButton.setLabel("Confirm Equation");
		int t;
		String x;
		int ss = equationArea.getSelectionStart();
		int se = equationArea.getSelectionEnd();
		//if (se == ss) se = ss+1;
		int zeroInserted = equationArea.getText().indexOf("0");
		
		t = equationArea.getText().indexOf("=");
		//Debug.prout(4,"XXX "+equationArea.getText()+" keycode "+c);
		//x = event.getKeyText(c);
		//x = event.getKeyText(event.getKeyCode());

//		Debug.prout(4,"XXX "+equationArea.getText()+" x= "+x+" thekeycode "+c+" =? "+
//		event.VK_EQUALS+" "+event.getKeyText(event.VK_EQUALS)+" char=? "+event.getKeyChar());
        //if (event.getKeyChar() == '=') x = "=";
        x = event.getKeyText(c);
        
		if (equationArea.getSelectedText().indexOf("=") != -1) return;		
	
		if ((x.equalsIgnoreCase("Delete") || x.equalsIgnoreCase("Backspace")) && (se != ss || ss > 0)) {
			if (ss == se && ss > 0) {
				se = ss;
				ss--;
				equationArea.setSelectionStart(ss);
				equationArea.setSelectionEnd(se);
			}
			if (equationArea.getSelectedText().indexOf("=") != -1) return;
			 equationArea.replaceRange("",ss,se);
		} else  if (t == -1) {// no equals yet do lhs
			if (x.equals("Equals")) {//"Equals"
				if (ss > 0) equationArea.replaceRange(x,ss,se);
			} else if (lhsAllowed.indexOf(x) != -1){
				equationArea.replaceRange(x,ss,se);
				explanation.setText("");
			}
			else {
				
			}
		} else if (ss < t) { // LHS
			if (lhsAllowed.indexOf(x) != -1)
				equationArea.replaceRange(x,ss,se);
			else {
				
			}
		} else if (ss >= t) { // RHS
			if ( zeroInserted < 0 ) {
				if (x.equals("0") && ss == equationArea.getText().length())
						equationArea.insertText(x,ss);
				else if (rhsAllowed.indexOf(x)!= -1)
					equationArea.replaceRange(x,ss,se);
				else {
				
				}
			} else {
				if (rhsAllowed.indexOf(x)!= -1 &&
					equationArea.getSelectionStart() < zeroInserted)
						equationArea.replaceRange(x,ss,se);
				else {
					
				}
			}
			t = equationArea.getText().indexOf("=");
			ss = equationArea.getSelectionStart();
			isEQUAL=true;
			if (t < 0) {isLHS = true;isEQUAL=false;}
			else if (ss < t) isLHS = true;
			else if (ss >= t) isLHS = false;

			if (t >= 0) {
				lhs = equationArea.getText().substring(0,t);
				if (equationArea.getText().length() > t+1)
					rhs = equationArea.getText().substring(t+1,equationArea.getText().length());
				else rhs = "";
			} else {
				lhs = equationArea.getText();
				rhs = "";
			}
			populateAvailableSymbols();
			populateCurrentSymbols();
		}
		
		
	//	equationArea.append();
		//}}
	}
	
	boolean isLHS = true;
	boolean isEQUAL = false;

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == itemField)
				itemField_MouseClicked(event);
			else if (object == equationArea)
				equationArea_MouseClicked(event);
		}
	}

	void itemField_MouseClicked(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the Button's label Get the text for Label
/*		switch (elementType) {
			case GENERATOR: okButton.setLabel("Confirm Generator");
				break;
			case IDENTITY: okButton.setLabel("Confirm Identity Element");
				break;
			case SPOUSE: okButton.setLabel("Confirm Spouse Element");
				break;
		}*/
		{}
		//}}
	}
	void itemField_KeyTyped(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
		//{{CONNECTION
		// Set the Button's label Get the text for Label
		if (event.getKeyCode() != event.VK_SHIFT){      
		    switch (elementType) {
			    case GENERATOR: okButton.setLabel("Confirm Generator");
				    break;
			    case IDENTITY: okButton.setLabel("Confirm Identity Element");
				    break;
			    case SPOUSE: okButton.setLabel("Confirm Spouse Element");
				    break;
		    }
		}
		//}}
	}

	void equationArea_MouseClicked(java.awt.event.MouseEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Set the Button's label
		//okButton.setLabel("Confirm Equation");
		//}}
	}

	void EquationPanel_KeyPressed(java.awt.event.KeyEvent event)
	{
		// to do: code goes here.
	}

	class SymComponent extends java.awt.event.ComponentAdapter
	{
		public void componentMoved(java.awt.event.ComponentEvent event)
		{
			Object object = event.getSource();
			if (object == EquationPanel.this)
				EquationPanel_ComponentMoved(event);
		}
	}

	void EquationPanel_ComponentMoved(java.awt.event.ComponentEvent event)
	{
		// to do: code goes here.
	}
}
