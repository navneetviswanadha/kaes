#BlueJ class context
comment0.target=XFile
comment1.params=
comment1.target=XFile()
comment10.params=format
comment10.target=java.lang.String[]\ ReadFormat(int[])
comment10.text=\tReadFormat\ expects\ a\ reference\ to\ an\ array\ of\ field\ numbers.\ Elements\ contains\ the\ \n\tappropriate\ field\ number.\ They\ need\ not\ be\ in\ the\ array\ in\ the\ order\ they\ \ appear\ in\ the\ \n\tfile.\ ReadFormat\ returns\ a\ String\ array\ with\ \ each\ element\ with\ a\ string\ representing\ the\n\tcorresponding\ format[i].\n\t\n\tIf\ format[0]\ is\ -1\ or\ format\ is\ null\ then\ all\ fields\ are\ returned\ in\ a\ string\ array.\ \n\t\n
comment11.params=aLine
comment11.target=java.lang.String[]\ MakeFields(java.lang.String)
comment12.params=aLine\ format
comment12.target=java.lang.String[]\ MakeFields(java.lang.String,\ int[])
comment13.params=
comment13.target=java.lang.String\ ReadLine()
comment14.params=
comment14.target=java.lang.String\ ReadLineNN()
comment15.params=doEmpty
comment15.target=int\ CountLines(boolean)
comment16.params=
comment16.target=boolean\ isOpen()
comment17.params=omode
comment17.target=boolean\ Choose(int)
comment18.params=omode\ filename
comment18.target=boolean\ Choose(int,\ java.lang.String)
comment19.params=omode\ fileName\ aMessage
comment19.target=boolean\ Choose(int,\ java.lang.String,\ java.lang.String)
comment2.params=someFile
comment2.target=XFile(java.io.File)
comment20.params=
comment20.target=boolean\ Close()
comment21.params=line
comment21.target=boolean\ WriteLine(java.lang.String)
comment22.params=line
comment22.target=boolean\ WriteString(java.lang.String)
comment23.params=line
comment23.target=boolean\ WriteBytes(java.lang.String)
comment24.params=bite
comment24.target=boolean\ WriteByte(int)
comment25.params=num
comment25.target=boolean\ WriteNumber(java.lang.Number)
comment26.params=
comment26.target=java.io.StreamTokenizer\ makeTokenizer()
comment27.params=
comment27.target=java.lang.String\ getStringToken()
comment28.params=
comment28.target=java.lang.Long\ getLong()
comment29.params=
comment29.target=java.lang.Double\ getDouble()
comment3.params=someFile
comment3.target=XFile(java.lang.String)
comment30.params=
comment30.target=Token\ getToken()
comment31.params=
comment31.target=java.lang.String[]\ readTag()
comment31.text=\n\ Reads\ the\ next\ SGML\ style\ tag\ from\ the\ Xfile\ DataInputStream\ \n\ specified\ input\ stream\ with\ the\ specified\ buffer\ size.\ \n\n\ @return\ \ String[]\ containing\ the\ tag\ and\ any\ parameters\n\t\t\t\t\treturns\ null\ if\ EOF\ reached;\n\ @since\ \ \ CSAC\n
comment32.params=start
comment32.target=java.lang.String[]\ readTag(boolean)
comment32.text=\n\ Reads\ the\ next\ SGML\ style\ tag\ from\ the\ Xfile\ DataInputStream\ \n\ specified\ input\ stream\ with\ the\ specified\ buffer\ size.\ \n\n\ @return\ \ String[]\ containing\ the\ tag\ and\ any\ parameters\n\t\t\t\t\treturns\ null\ if\ EOF\ reached;\n\ @param\ \ \ start\ \ have\ we\ already\ read\ the\ '<'\n\ @since\ \ \ CSAC\n
comment4.params=sstream
comment4.target=boolean\ Open(java.lang.String)
comment5.params=
comment5.target=boolean\ Open()
comment6.params=omode
comment6.target=boolean\ Open(int)
comment7.params=
comment7.target=boolean\ OpenPrint()
comment8.params=aLine
comment8.target=int\ CountFields(java.lang.String)
comment8.text=\n\tCountfields\ takes\ a\ string\ and\ counts\ how\ many\ instances\ of\ Delimiter\ occur\ in\ the\ string\n\tplus\ one.\t\n
comment9.params=aLine
comment9.target=int\ BreakFields(java.lang.String)
comment9.text=\n\tBreakFields\ calls\ Countfields\ if\ necessary\ to\ initialize\ the\ theFields\ array,\ which\ is\n\tan\ int\ array\ of\ starting\ points\ for\ substrings\ in\ the\ String\ aLine.\ Breakfields\ then\n\tfills\ in\ this\ array\ for\ subsequent\ lines.\n\t\n\tAt\ the\ moment\ it\ assumes\ all\ lines\ have\ the\ same\ number\ of\ fields\ as\ the\ first\ one\n\tit\ is\ intialized\ with.\ Beware\ blank\ initial\ lines\ as\ well...and\ blank\ lines\ in\ general\n\tI\ guess\!\!\!\n
numComments=33
