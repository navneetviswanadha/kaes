#BlueJ class context
comment0.target=MakeAlgebra
comment0.text=history\r\n\ 10/10\ DR\ changed\ return\ in\ searchGeneratorsForRecursiveEquations\r\n\ so\ that\ false\ is\ returned\ if\ no\ recursive\ equation\ is\ found;\r\n\ needed\ change\ for\ flagging\ dialogue\ text\r\n\ 3/11\ DR\ added\ code\ to\ establishReciprocalsForGenerators\ to\ set\ recipocal\ of\r\n\ algebra\ element\ to\ same\ sex\ as\ algebra\ element\r\n\ 5/31\ DR\ modified\ findRecursiveEquations\ so\ as\ to\ add\ more\ than\ one\ equation\r\n\ 11/23\ DR\ changed\ searchGeneratorsForRecursiveEquations\ to\ return\ the\ types\ of\ equations\r\n\ changed\ findRecursiveEquations\ to\ return\ an\ EquationVector\ of\ equations\ found\r\n\ 11/10/02\ DR\ added\ searchGeneratorsForParentSibEquations(),\ findParentSibEquations(AlgebraSymbol\ a)\r\n
comment1.params=k
comment1.target=MakeAlgebra(KinshipAlgebra)
comment10.params=x\ gen
comment10.target=ListVector\ _checkListVectors(ListVector,\ java.lang.String)
comment11.params=x
comment11.target=boolean\ _checkForSibRecEquations(ListVector)
comment12.params=eq\ r
comment12.target=EquationVector\ _modifyEquations(EquationVector,\ StringVector)
comment13.params=
comment13.target=boolean\ hasIdentityElement()
comment14.params=
comment14.target=boolean\ hasFocalElements()
comment15.params=id
comment15.target=boolean\ addIdentityElement(java.lang.String)
comment16.params=inName
comment16.target=java.lang.String\ assignName(java.lang.String)
comment17.params=let\ inName
comment17.target=java.lang.String\ assignName(java.lang.String,\ java.lang.String)
comment18.params=
comment18.target=java.util.Vector\ searchGeneratorsForRecursiveEquations()
comment19.params=
comment19.target=boolean\ searchGeneratorsForParentSibEquations()
comment2.params=gens
comment2.target=void\ addGenerators(StringVector)
comment20.params=algName
comment20.target=java.lang.String\ getKinName(java.lang.String)
comment21.params=kinName
comment21.target=java.lang.String\ getAlgName(java.lang.String)
comment22.params=kinName
comment22.target=boolean\ isAlgName(java.lang.String)
comment23.params=results
comment23.target=StringVector\ replaceKinWithAlgebraNames(StringVector)
comment24.params=results
comment24.target=void\ replaceKinWithAlgebraNames(ListVector)
comment25.params=results
comment25.target=StringVector\ replaceAlgebraWithKinNames(StringVector)
comment26.params=results
comment26.target=void\ replaceAlgebraWithKinNames(ListVector)
comment27.params=a
comment27.target=EquationVector\ findRecursiveEquations(AlgebraSymbol)
comment28.params=a
comment28.target=EquationVector\ findParentSibEquations(AlgebraSymbol)
comment29.params=
comment29.target=boolean\ establishReciprocalEquations()
comment3.params=gens
comment3.target=void\ addGenerator(java.lang.String)
comment30.params=fr
comment30.target=Algebra\ makeIsomorphicAlgebra(KintermFrame)
comment30.text=\ make\ an\ isomorphic\ copy\ of\ an\ algebra\ with\ new\ symbols\r\n\ @return\ the\ isomorphic\ copy\r\n
comment31.params=sameSex\ fr
comment31.target=Algebra\ makeIsomorphicAlgebra(boolean,\ KintermFrame)
comment31.text=\ make\ an\ isomorphic\ copy\ of\ an\ algebra\ with\ new\ symbols\ and\ same/opposite\ sex\ markings\r\n\ @sameSex\ flag\ for\ same\ or\ opposite\ sex\ symbols\r\n\ @return\ the\ isomorphic\ copy\r\n
comment32.params=sv\ sameSex\ fr
comment32.target=Algebra\ makeIsomorphicAlgebra(StringVector,\ boolean,\ KintermFrame)
comment32.text=\ make\ an\ isomorphic\ copy\ of\ an\ algebra\ with\ new\ symbols\ and\ opposite\ sex\ markings\r\n\ @sv\ list\ of\ symbols\ that\ will\ not\ be\ replaced\ in\ isomorphic\ copy\r\n\ @sameSex\ boolean\ switch\ for\ same\ sex\ or\ opposite\ sex\ isomorphic\ symbols\r\n\ @return\ the\ isomorphic\ copy\r\n
comment33.params=
comment33.target=int\ getAlgebraClass()
comment34.params=
comment34.target=int\ getAlgebraType()
comment35.params=
comment35.target=boolean\ singleChild()
comment36.params=
comment36.target=void\ addCrossSexEquations()
comment37.params=singleFlag\ sex1\ sex2
comment37.target=void\ addClassificatoryStructure(boolean,\ java.lang.String,\ java.lang.String)
comment38.params=
comment38.target=void\ addSexIdEquations()
comment38.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ of\ form\ id1\ id2\=id1\ and\ id2\ id1\=\ id2\ and\ id1\ Z\ \=\ B,\ id2\ B\ \=\ Z,\ id1\ sex\ B\ and\ id2\ sex\ F\r\n\ @param\ id\ the\ sex-marked\ (pseudo)\ identity\ elements\r\n
comment39.params=
comment39.target=void\ addMixedSexSameArrowEquations()
comment39.text=\ adds\ equations\ of\ form\ Pp\=PP\ where\ P\ and\ p\ are\ in\ the\ same\r\n\ direction\ but\ differ\ in\ sex\ marking\r\n
comment4.params=recip\ gen\ target
comment4.target=boolean\ addReciprocal(java.lang.String,\ java.lang.String,\ java.lang.String)
comment40.params=
comment40.target=void\ addAnalogousEquations()
comment40.text=\ if\ xy\=zw\ is\ an\ equation,\ X(Z)\ is\ opposite\ sex\ generator\ for\ x(z)\ then\r\n\ make\ Xy\=Zw\ an\ equation\r\n
comment41.params=
comment41.target=void\ addSingleChildEquations()
comment41.text=\ equations\ of\ form\ S\ FemaleSelf\ \=\ S,\ D\ MaleSelf\ \=\ D\r\n\r\n
comment42.params=
comment42.target=void\ linkMaleFemaleElementEquations()
comment42.text=\ make\ equations\ of\ form\ xx...x\=yy...y\ up\ to\ max\ size\ of\ product\ of\r\n\ form\ xx...x\ \=\ x...x,\ where\ x\ and\ y\ are\ of\ opposite\ sex\ and\ either\ up\ or\ down\r\n
comment43.params=n\ type
comment43.target=void\ linkElementProductEquations(int,\ int)
comment43.text=\ make\ equations\ of\ form\ xx...x\=yy...y\ and\ equate\ xx...x&yy...y\r\n\r\n\ @n\ int\ size\ of\ product\r\n\ @type\ int\ type\ of\ product\r\n
comment44.params=
comment44.target=void\ addOlderYoungerSibProducts()
comment45.params=sex
comment45.target=void\ addOlderYoungerSibProductsX(java.lang.String)
comment46.params=sex
comment46.target=void\ addOlderYoungerSibProducts(java.lang.String)
comment47.params=sex
comment47.target=void\ equateChildElements(java.lang.String)
comment48.params=sex
comment48.target=void\ equateTheCrossCousins(java.lang.String)
comment49.params=sex
comment49.target=void\ equateCrossCousins(java.lang.String)
comment5.params=
comment5.target=StringVector\ checkGeneratorsForReciprocals()
comment50.params=
comment50.target=void\ addCrossCousinEquation()
comment51.params=sex
comment51.target=void\ addCrossCousinEquation(java.lang.String)
comment52.params=
comment52.target=void\ addParentChildProductEquation()
comment53.params=sex
comment53.target=void\ addParentChildProductEquation(java.lang.String)
comment54.params=
comment54.target=void\ addSibChildProducts()
comment55.params=sex
comment55.target=void\ addSibChildProducts(java.lang.String)
comment56.params=
comment56.target=void\ addParentChildProducts()
comment57.params=sex
comment57.target=void\ addParentChildProducts(java.lang.String)
comment58.params=
comment58.target=void\ addChildSibParentProducts()
comment59.params=sex
comment59.target=void\ addChildSibParentProducts(java.lang.String)
comment6.params=gen
comment6.target=boolean\ hasReciprocal(java.lang.String)
comment7.params=
comment7.target=boolean\ establishReciprocalsForGenerators()
comment8.params=asSib
comment8.target=void\ _makeSibEquations(AlgebraSymbolVector)
comment9.params=asSib\ as1\ as2\ lhs\ rhs
comment9.target=Equation\ _MakeEquation(AlgebraSymbolVector,\ AlgebraSymbol,\ AlgebraSymbol,\ AlgebraSymbolVector,\ AlgebraSymbolVector)
numComments=60
