#BlueJ class context
comment0.target=CayleyTable
comment0.text=History\r\n\ 10/11\ DR\ added\ clr\ parameter\ to\ populateModel\ procedure\r\n\ 10/15\ DR\ added\ symbolColor\ procedure\r\n\ 10/17\ DR\ added\ symbolLineStyle\ procedure\r\n\ 10/19\ DR\ added\ "generators\ x\ sex\ marked"\ products\ to\ protoCayley\ in\ generateProducts\r\n\ added\ restriction\ to\ populateModel3D\ to\ exclude\ sex\ generator\ in\ the\ connection\ procedure\r\n\ 10/29\ DR\ added\ "-1"\ condition\ to\ populatteModel3D\ to\ permit\ excluding\ connecting\ points\ based\ on\ value\ of\ ord\r\n\ where\ ord\ is\ set\ to\ -1\ in\ Model3D\ for\ a\ graph\ layer\ that\ will\ be\ excluded\ from\ graph\r\n\ 2/14\ DR\ aded\ mapFlag\ to\ control\ symbols\ used\ in\ graph\r\n\ 2/24\ DR\ corrected\ data\ partitioning\ in\ toData,toColumn,etc\ to\ allow\ for\ data\ of\ form\ "x\ [x,\ y]\ z"\r\n\ 2/27\ DR\ added\ complexPaths\ test\ to\ calcCoordinates\r\n\ 3/3\ DR\ added\ symbolSplitNode\ procedure\ to\ populateModel\ to\ mark\ if\ an\ element\ is\ bifurcated\ in\ the\ graph\r\n\ consolidate\ the\ two\ forms\ of\ populateModel\r\n\ 3/5\ DR\ added\ the\ procedure\ useGenerators\ to\ activate\ the\ layer\ buttons\ in\ the\ graph\ window;\r\n\ added\ gen1Flag...gen3Flag,\ along\ with\ setGen1Flag,\ ...,\ setGen3Flag\ procedures\r\n\ 3/7\ DR\ redid\ terminating\ conditions\ in\ generateProducts;\ added\ condition\ to\ make\ node\ white\ in\ populateModel\ to\r\n\ signify\ that\ products\ continue\ indefinitely\ beyond\ the\ graph\ boundary\ MAXLENGTH\r\n\ 7/14\ DR\ added\ additional\ criteria\ based\ on\ tsex,\ candsex\ and\ curTsex\ to\ generateCayleyProducts_new;\ these\r\n\ need\ to\ be\ examined\ for\ their\ general\ validity\!\!\!\!\r\n\ 10/6\ DR\ added\ procedures\ numberOfGenerators(),\ generatorNumber(AlgebraSymbol\ g),\r\n\ resetDimension(AlgebraSymbol\ g),useCalcMethod1(AlgebraPath\ thePath,\ String\ gen),\r\n\ useCalcMethod2(AlgebraPath\ thePath,int\ j,int\ dim,\ String\ gen)\ to\ calcCoordinates\r\n\ 11/7\ DR\ added\ variant\ applyRules(RuleVector\ someRules,\ ListHashtable\ somePaths,\ AlgebraPathVector\ keys)\r\n\ to\ accomodate\ linealDescendantRule\ which\ is\ applied\ to\ the\ cayley\ products;\ modified\ populateModel\r\n\ to\ allow\ for\ sex\ generators\ when\ the\ algebra\ has\ sex\ marked\ generators\ (needed\ to\ accomodate\r\n\ Shipibo\ terminology\ where\ FaCh\ \=\ M\ and\ MoCh\ \=\ F\ DR\ 1/24/03???\ is\ this\ correct??\r\n\ 11/12\ DR\ added\ pathColor(AlgebraPath\ ap)\ to\ set\ sex\ color\ of\ path\ on\ a\ path\r\n\ criterion\ than\ just\ the\ first\ symbol\ in\ path\ symbolColor\ more\ flexible\r\n\ modified\ calcCoordinates\ and\ complexPath\ to\ use\ equivalent\ path\ form\ [X,&,Y]\r\n\ 11/22\ DR\ added\ procedure\ computeMaxLength(),\ set\ MAXLENGTH\ \=\ computeMaxLength()\ ini\ computeProducts\r\n11/24\ DR\ rewrote\ main\ for\ loop\ in\ populateModel\ to\ be\ based\ on\ protoCayleyHash\ rather\ than\ protoCayley\r\n\ 5/27\ DR\ added\ toData(Vector\ col,\ int\ labelcode)\ as\ a\ wrapper\ for\ two\ procedures\ toKinData\r\n\ and\ toAlgData,\ both\ used\ to\ construct\ entries\ for\ tables\r\n\ added\ toColumnNames(int\ labelcode)\ as\ a\ wraper\ to\ two\ procedures\ toAlgColumnNames\r\n\ and\ toKinColumnNames,\ both\ used\ to\ construct\ entries\ for\ tables\r\n\ 8/26\ DR\ corrected\ error\ in\ generateCayleyProducts_new;\ get\ sexes\ from\ algebra\r\n\ 9/1\ DR\ modified\ generateCayleyProducts_new\ to\ handle\ equivalent\ algebra\ products\ of\r\n\ form\ A&B,\ where\ A,\ B\ are\ alg\ elements\ that\ have\ been\ made\ equivalent\r\n\ 8/7/04\ DWR\ changed\ theProducts.addElement\ to\ theProducts.addUnique\ in\ InitProducts\r\n
comment1.params=
comment1.target=java.util.Hashtable\ getApRules()
comment10.params=flag
comment10.target=void\ setGen2Flag(boolean)
comment11.params=flag
comment11.target=void\ setGen3Flag(boolean)
comment12.params=flag
comment12.target=void\ setGen4Flag(boolean)
comment13.params=sym
comment13.target=void\ setSymbols(AlgebraSymbolVector)
comment14.params=sym
comment14.target=void\ initProducts(AlgebraSymbolVector)
comment15.params=
comment15.target=ListVector\ getFullProducts()
comment16.params=gen\ term\ prod
comment16.target=void\ fullProducts(AlgebraSymbol,\ AlgebraPath,\ AlgebraPath)
comment17.params=prod
comment17.target=int\ findFullProd(AlgebraPath)
comment18.params=
comment18.target=AlgebraPathVector\ getProducts()
comment19.params=
comment19.target=void\ populateProtoCayleyHash()
comment2.params=n
comment2.target=void\ setCoordinates(float[][])
comment20.params=
comment20.target=int\ computeMaxLength()
comment21.params=
comment21.target=AlgebraPathVector\ generateProducts()
comment22.params=c
comment22.target=void\ removeZeros(ListVector)
comment23.params=apv
comment23.target=void\ removeZeros(AlgebraPathVector)
comment24.params=someRules\ somePaths
comment24.target=void\ applyRules(RuleVector,\ AlgebraPathVector)
comment24.text=\ apply\ rules\ to\ the\ algebra\ elements\r\n\ @someRules\ the\ rules\ to\ be\ applied\r\n\ @somePaths\ the\ elements\ to\ which\ the\ rules\ are\ to\ be\ applied\r\n
comment25.params=someRules\ someProducts\ somePaths
comment25.target=void\ applyRules(RuleVector,\ ListHashtable,\ AlgebraPathVector)
comment25.text=\ apply\ rules\ to\ the\ Cayley\ Products\r\n\ @someRules\ the\ rules\ to\ be\ applied\r\n\ @someProducts\ the\ Cayley\ Products\ to\ which\ the\ rules\ are\ to\ be\ applied\r\n\ @somePaths\ the\ elements\ to\ be\ tested\ for\ addition\ or\ deletion\r\n
comment26.params=someRules\ somePath
comment26.target=void\ applyRules(RuleVector,\ AlgebraPath)
comment27.params=row\ col
comment27.target=AlgebraPath\ generateCayleyProduct(int,\ int)
comment28.params=row\ as
comment28.target=AlgebraPath\ generateCayleyProduct(int,\ AlgebraSymbol)
comment29.params=ap\ as
comment29.target=AlgebraPath\ generateCayleyProduct(AlgebraPath,\ AlgebraSymbol)
comment3.params=
comment3.target=float[][]\ getCoordinates()
comment30.params=
comment30.target=void\ generateCayleyProducts()
comment30.text=\ generate\ Cayley\ table\ entries\ from\ the\ products\ in\ this\ CayleyTable.\r\n\ This\ form\ includes\ the\ identity\ mapping\ if\ any.\r\n
comment31.params=kinNames\ keys
comment31.target=void\ generateCayleyProducts(java.util.Hashtable,\ AlgebraPathVector)
comment31.text=\ generate\ Cayley\ table\ entries\ from\ the\ products\ from\ another\ CayleyEntity\ translating\ symbol\ names\ into\r\n\ corresponding\ terms\ (usually\ kin\ terms).\ This\ form\ used\ to\ limit\ the\ products\ to\ the\ products\ of\ an\r\n\ external\ map.\ However\ products\ are\ generated\ by\ the\ Algebra\ associated\ with\ this\ CayleyTable.\r\n\ This\ form\ does\ not\ include\ the\ identity\ mapping,\ if\ any,\ in\ order\ to\ accommodate\ CayleyEntities\ that\ do\r\n\ not\ equate\ focal\ terms\ or\ identity\ terms\ to\ generators.\r\n\ @see\ KinTermMap\r\n\ @param\ kinNames\ hash\ table\ with\ product\ to\ kin\ term\ mapping\r\n\ @param\ keys\ list\ of\ paths\ (e.g.\ table\ rows)\ to\ generate\ products\ from.\r\n
comment32.params=kinNames\ keys\ doIdentity
comment32.target=void\ generateCayleyProducts(java.util.Hashtable,\ AlgebraPathVector,\ boolean)
comment32.text=\ generate\ Cayley\ table\ entries\ from\ the\ products\ from\ another\ CayleyEntity\ translating\ symbol\ names\ into\r\n\ corresponding\ terms\ (usually\ other\ algebra\ elements).\ This\ form\ used\ to\ limit\ the\ products\ to\ the\ products\ of\ an\r\n\ external\ algebra\ map.\ However\ products\ are\ generated\ by\ the\ Algebra\ associated\ with\ this\ CayleyTable.\r\n\ This\ form\ optionally\ include\ the\ identity\ mapping\ based\ on\ doIdentity,\ in\ order\ to\ accommodate\ algebras\ that\ do\r\n\ not\ have\ identity\ terms,\ e.g.\ partial\ isomorphism\ is\ all\ that\ is\ claimed,\ at\ best.\r\n\ @see\ KinTermMap.mapAlgebraProductsToKinshipTerms(AlgebraPathVector\ a)\r\n\ @param\ kinNames\ hash\ table\ with\ product\ to\ kin\ term\ mapping\r\n\ @param\ keys\ list\ of\ paths\ (e.g.\ table\ rows)\ to\ generate\ products\ from.\r\n\ @param\ doIdentity\ if\ true,\ generate\ products\ using\ identity\ element\ as\ generator.\r\n
comment33.params=kinNames
comment33.target=void\ generateCayleyProducts(java.util.Hashtable)
comment34.params=theMap\ kinNames\ keys
comment34.target=void\ generateCayleyProducts_new(KinTermMap,\ java.util.Hashtable,\ AlgebraPathVector)
comment35.params=aMap
comment35.target=StringVector\ compareCayleyTables(CayleyEntity)
comment35.text=\ Compares\ a\ Cayley\ table\ against\ an\ external\ Cayley\ table\ using\ the\r\n\ external\ table's\ keys;\r\n\ @param\ an\ object\ with\ some\ Cayley\ capabilities\r\n\ @return\ a\ list\ of\ anomolies\ --\ empty\ indicates\ half-isomorphism\ e.g.\ do\ both\ ways\ to\ determine\ isomorphism\r\n
comment36.params=mapTerm
comment36.target=java.lang.String\ getTerm(java.lang.String)
comment36.text=\ returns\ a\ product\ term\ \ based\ on\ product\ key\r\n\ @param\ mapTerm\ the\ key\ to\ look\ up\r\n\ @return\ term\ associated\ with\ mapTerm\r\n
comment37.params=
comment37.target=java.lang.String\ toString()
comment38.params=
comment38.target=java.lang.String\ toTableString()
comment39.params=labelcode
comment39.target=java.util.Vector\ toColumnNames(int)
comment4.params=
comment4.target=CayleyTable()
comment40.params=
comment40.target=java.util.Vector\ _toKinColumnNames()
comment41.params=
comment41.target=java.util.Vector\ _toAlgColumnNames()
comment42.params=col\ labelcode
comment42.target=java.util.Vector\ toData(java.util.Vector,\ int)
comment43.params=col
comment43.target=java.util.Vector\ _toAlgData(java.util.Vector)
comment44.params=col
comment44.target=java.util.Vector\ _toKinData(java.util.Vector)
comment45.params=
comment45.target=boolean\ complexPaths()
comment46.params=ap
comment46.target=boolean\ complexPath(AlgebraPath)
comment47.params=
comment47.target=int\ numberOfGenerators()
comment48.params=as
comment48.target=boolean\ useGenerator(java.lang.String)
comment49.params=md
comment49.target=void\ populateModel(ThreeD)
comment5.params=n
comment5.target=void\ setSerialNumber(long)
comment50.params=
comment50.target=boolean\ reverseCoords()
comment51.params=md\ ak
comment51.target=void\ populateModel(ThreeD,\ java.util.Hashtable)
comment52.params=as\ cFlag\ i\ j
comment52.target=java.lang.Boolean\ symbolSplitNode(AlgebraSymbol,\ boolean,\ int,\ int)
comment53.params=ap
comment53.target=java.awt.Color\ pathColor(AlgebraPath)
comment54.params=as
comment54.target=java.awt.Color\ symbolColor(AlgebraSymbol)
comment55.params=as
comment55.target=java.lang.Integer\ symbolLineStyle(AlgebraSymbol)
comment56.params=g\ md
comment56.target=void\ populateModelGenerator(AlgebraSymbol,\ ThreeD)
comment57.params=a\ g\ md
comment57.target=void\ populateModelProduct(AlgebraPath,\ AlgebraSymbol,\ ThreeD)
comment58.params=
comment58.target=java.lang.String\ toXML()
comment6.params=
comment6.target=long\ getSerialNumber()
comment7.params=sym
comment7.target=CayleyTable(AlgebraSymbolVector)
comment8.params=flag
comment8.target=CayleyTable\ setMapFlag(boolean)
comment9.params=flag
comment9.target=void\ setGen1Flag(boolean)
numComments=59
