#BlueJ class context
comment0.target=Algebra
comment0.text=\ Revision\ History\r\n\ 31-10\ MF\ Removed\ debugging\ exception\ generated\ in\ pushAlgebra.\r\n\ 31-10\ MF\ Replaced\ all\ System.out.println\ with\ Debug(zerolevel,Message)\ construction\r\n\ 2/14\ DR\ add\ null\ test\ "if\ (rcp\ \!\=\ null)"\ to\ procedures\ "getUpOrDownArrows"\ and\ "isArrow"\r\n\ 2/22\ DR\ moved\ procedure\ enterSpouseTerm()\ from\ AopsOps;\ added\ string\ argument\ to\ the\ procedure\r\n\ modified\ enterSpouseTerm()\ procedure\ in\ AopsOps\ to\ call\ algebra.enterSpouseTerm\ with\ automatically\ generated\ spouse\ symbols\r\n\ 7-3-01\ MF\ added\ a\ static\ variable,\ theOnlyAlgebra\ and\ removed\ the\ algebras\ vector\r\n\ \ \ \ \ \ \ \ \ \ \ \ problems\ that\ could\ stem\ from\ this\ emerge\ mainly\ in\ the\ new\ Algebra\ method,\ where\ the\ new\r\n\t\t\t\ algebra\ becomes\ the\ current\ algebra.\ However,\ this\ seems\ to\ be\ appropriate\ in\ most\ cases.\r\n\ 7-3-01\ MF\ modified\ clone\ to\ preserve\ the\ current\ Algebra.\r\n\ 5/29\ DR\ added\ procedures\ getAddReciprocalEquations\r\n\ 7/6\ DR\ deleted\ getCurrent\ and\ pushCurrent\ in\ procedure\ clone\r\n\ 7/7\ DR\ added\ substitute\ and\ isomorphicClone\ procedures,\ added\r\n\ getValues()\ procedure\r\n\ 7/12\ DR\ included\ deepClone\ in\ isomorphicClone\ procedure\r\n\ 7/24\ DR\ added\ procedure\ \tEquation\ substitute(Equation\ eq,\ AlgebraSymbolVector\ anew)\r\n\ added\ procedure\ constructIDEquations();\ added\ procedure\ makeAlgebraJoin(Algebra\ a)\r\n\ added\ procedure\ addSexIdEquations\r\n\ 9/24\ DR\ added\ algc.identityElement.setReciprocal(algc.identityElement);\r\n\ to\ isomorphicClone\r\n\ 9/28\ DR\ corrected\ error\ in\ isArrow();\ modified\ createReciprocalEquation(Equation\ e)\ to\r\n\ allow\ for\ equations\ having\ elements\ with\ different\ sexes\r\n\ 9/30\ DR\ added\ procedure\ addCrossSexEquations()\ to\ construct\ equations\ needed\ when\ making\r\n\ join\ of\ two\ algebras,\ each\ with\ elements\ of\ a\ single,\ but\ opposite,\ sex\r\n\ 9/30\ DR\ added\ procedure\ addAnalogousEquations()\ to\ construct\ equations\ of\ form\r\n\ aBCD\=eF\ when\ ABCD\=EF\ is\ already\ an\ equation\ and\ a,e\ have\ opposite\ sex\ and\ same\r\n\ direction\ as\ A,\ E\r\n\ added\ procedure\ addMixedSexSameArrowEquations()to\ include\ equations\ of\ form\ Pp\ \=\ PP\r\n\ added\ procedure\ addSexIdEquations()\ for\ products\ of\ form\ IdX\ \=\ 0\ when\ Id\ is\ a\ pseudoidenity\ and\r\n\ sex\ of\ ID\ is\ not\ the\ same\ as\ sex\ of\ X;\ procedure\ not\ currently\ used\r\n\ added\ procedure\ constructIDEquations()\ to\ make\ explicit\ versions\ of\ implicit\ id\ equations\r\n\ 10/14\ DR\ added\ procedure\ removeRedundancy()\r\n\ 10/29\ DR\ added\ condition\ \!as.isIdentityElement()\ to\ MALE\ and\ FEMALE\ case\ in\ isArrow()\r\n\ 11/7\ DR\ added\ procedure\ hasSexMarkedGenerators(),\ modified\ makeAlgebraJoin\ to\ cover\ case\r\n\ where\ two\ sex\ marked\ algebras\ with\ identites\ are\ joined\ but\ the\ join\ has\ a\ single\ identity\ element\r\n\ 11/11\ DR\ cleaned\ up\ code\ for\ algebraJoin;\ modified\ sexGenerator\ to\ accomodate\ adding\ sex\r\n\ generators\ when\ algebra\ has\ sex\ marked\ elements\ already;\ dddd\ procedure\ addLeftSexGeneratorProducts\r\n\ to\ add\ equations\ of\ form\ FX\ \=Y\ where\ X\ is\ male\ marked\ and\ Y\ is\ female\ marked\r\n\ 11/22\ DR\ added\ procedures\ getRecursiveEquations(),\ getZeroEquations()\r\n\ 8/23\ DR\ modified\ getDisplayGenerators()\ to\ pass\ sex\ generators\ for\ displaying\r\n\ 8/26\ DR\ added\ "N"\ as\ possible\ sex\ generator\ in\ getSexGenerators()\r\n
comment1.params=x
comment1.target=void\ setSerialNumber(long)
comment10.params=amod\ anew
comment10.target=AlgebraSymbol\ substitute(AlgebraSymbol,\ AlgebraSymbolVector)
comment10.text=\ replace\ ith\ symbol,\ amod,\ in\ Symbols\ by\ ith\ symbol\ in\ anew\r\n\ @amod\ symbol\ to\ be\ replaced\r\n\ @anew\ vector\ of\ replacement\ symbols\r\n\ @return\ ith\ symbol\ in\ anew\ where\ amod\ is\ ith\ symbol\ in\ Symbols\r\n
comment100.params=sex
comment100.target=boolean\ enterSexGenerator(int)
comment101.params=
comment101.target=boolean\ hasSexMarkedGenerators()
comment101.text=\ determine\ if\ there\ are\ both\ male\ marked\ and\ female\ marked\ generators\r\n\ @return\ boolean\r\n
comment102.params=
comment102.target=boolean\ hasSibGenerators()
comment102.text=\ determine\ if\ there\ are\ sib\ generators\r\n\ @return\ boolean\r\n
comment103.params=
comment103.target=EquationVector\ getRecursiveEquations()
comment104.params=
comment104.target=EquationVector\ getZeroEquations()
comment11.params=amod\ anew\ aold
comment11.target=AlgebraSymbol\ substitute(AlgebraSymbol,\ AlgebraSymbolVector,\ AlgebraSymbolVector)
comment11.text=\ replace\ ith\ symbol,\ amod,\ in\ amod\ by\ ith\ symbol\ in\ anew\r\n\ @amod\ symbol\ to\ be\ replaced\r\n\ @anew\ vector\ of\ replacement\ symbols\r\n\ @aold\ vector\ of\ original\ symbols\r\n\ @return\ ith\ symbol\ in\ anew\ where\ amod\ is\ ith\ symbol\ in\ aold\r\n
comment12.params=amod\ anew
comment12.target=AlgebraSymbolVector\ substitute(AlgebraSymbolVector,\ AlgebraSymbolVector)
comment13.params=amod\ anew\ aold
comment13.target=AlgebraSymbolVector\ substitute(AlgebraSymbolVector,\ AlgebraSymbolVector,\ AlgebraSymbolVector)
comment14.params=eq\ anew
comment14.target=Equation\ substitute(Equation,\ AlgebraSymbolVector)
comment15.params=eq\ anew\ aold
comment15.target=Equation\ substitute(Equation,\ AlgebraSymbolVector,\ AlgebraSymbolVector)
comment16.params=emod\ anew
comment16.target=EquationVector\ substitute(EquationVector,\ AlgebraSymbolVector)
comment17.params=emod\ anew\ aold
comment17.target=EquationVector\ substitute(EquationVector,\ AlgebraSymbolVector,\ AlgebraSymbolVector)
comment18.params=
comment18.target=java.lang.Object\ isomorphicClone()
comment19.params=
comment19.target=java.lang.String\ toXML()
comment2.params=
comment2.target=long\ getSerialNumber()
comment20.params=
comment20.target=java.lang.Object\ clone()
comment21.params=
comment21.target=void\ defaultEquations()
comment21.text=\ initialise\ the\ algebra\ with\ a\ basic\ set\ of\ equations,\ xI\ \=\ x\ and\ x0\ \=\ 0\r\n
comment22.params=
comment22.target=Algebra()
comment22.text=\ Initalise\ algebra\ by\ adding\ to\ the\ static\ list\ of\ algebra\ stages\ and\ setting\ up\r\n\ basic\ unbound\ identity\ operator\ equations\ and\ null\ operator\ equations\r\n
comment23.params=n
comment23.target=Algebra(java.lang.String)
comment23.text=\ Intialise\ with\ name\ in\ addition\ to\ adding\ to\ the\ static\ list\ of\ algebra\ stages\\\r\n\ and\ setting\ up\ basic\ unbound\ identity\ operator\ equations\ and\ null\ operator\ equations\r\n\ @param\ name\ of\ algebra\r\n
comment24.params=
comment24.target=RuleVector\ getRules()
comment25.params=
comment25.target=void\ initRules()
comment26.params=r
comment26.target=void\ setRules(RuleVector)
comment27.params=r
comment27.target=void\ addRule(Rule)
comment28.params=a
comment28.target=void\ setUnBind(AlgebraSymbolVar)
comment28.text=\ Set\ something\ to\ be\ unbound\ at\ end\ of\ evaluation\ cycle\r\n
comment29.params=
comment29.target=void\ unbind()
comment29.text=\ unbinds\ bound\ variables\ after\ an\ evaluation\ cycle\r\n
comment3.params=eqList
comment3.target=void\ setSuppressEquations(StringVector)
comment30.params=
comment30.target=AlgebraSymbolVector\ getElements()
comment30.text=\ return\ the\ Algebra\ Symbols\ this\ algebra\ ranges\ over\r\n
comment31.params=
comment31.target=StringVector\ getValues()
comment31.text=\ return\ the\ Algebra\ Values\ this\ algebra\ ranges\ over\r\n
comment32.params=
comment32.target=AlgebraSymbolVector\ getFocalElements()
comment32.text=\ return\ the\ focal\ elements\ of\ this\ Algebra,\ if\ any\ (empty\ vector\ means\ none)\r\n
comment33.params=sex
comment33.target=AlgebraSymbolVector\ getFocalElements(java.lang.String)
comment33.text=\ return\ the\ sex\ specified\ focal\ elements\ of\ this\ Algebra,\ if\ any\ (empty\ vector\ means\ none)\r\n\ \ @sex\ String\ sex\ of\ focal\ element\r\n
comment34.params=sex
comment34.target=AlgebraSymbol\ getFocalElement(java.lang.String)
comment34.text=\ return\ the\ sex\ specified\ focal\ element\ of\ this\ Algebra,\ if\ any\r\n\ \ @sex\ String\ sex\ of\ focal\ element\r\n
comment35.params=
comment35.target=boolean\ hasFocalElements()
comment35.text=\ return\ true\ if\ this\ Algebra\ has\ focal\ element(s)\r\n
comment36.params=
comment36.target=AlgebraSymbol\ getIdentityElement()
comment36.text=\ return\ the\ identity\ elemnts\ of\ this\ Algebra,\ if\ any\ \ (empty\ vector\ means\ none)\r\n
comment37.params=a
comment37.target=AlgebraSymbol\ findElement(AlgebraSymbol)
comment37.text=\r\n
comment38.params=a
comment38.target=AlgebraSymbol\ findElement(java.lang.String)
comment38.text=\r\n
comment39.params=a
comment39.target=AlgebraSymbol\ getElement(java.lang.String)
comment39.text=\ find\ a\ symbol\ of\ the\ algebra\ given\ its\ name,\ add\ it\ to\ the\ elements\r\n\ if\ not\ present.\ Always\ succeeds.\r\n\ @param\ a\ the\ element\ to\ find\ or\ add\ to\ the\ Algebra\r\n
comment4.params=
comment4.target=StringVector\ getSuppressEquations()
comment40.params=a
comment40.target=AlgebraSymbol\ getElement(AlgebraSymbol)
comment40.text=\ find\ a\ symbol\ of\ the\ algebra\ given\ its\ name,\ add\ it\ to\ the\ elements\r\n\ if\ not\ present.\ Always\ succeeds.\r\n\ @param\ a\ the\ AlgebraSymbol\ to\ find\ or\ add\ to\ the\ Algebra\r\n
comment41.params=a
comment41.target=void\ addGenerator(AlgebraSymbol)
comment41.text=\ adds\ a\ generator\ to\ the\ list\r\n
comment42.params=arrow\ sex
comment42.target=AlgebraSymbol\ getGenerators(int,\ java.lang.String)
comment42.text=\ returns\ the\ generator\r\n\ @arrow\ arrow\ direction\ for\ generators\r\n\ @sex\ sex\ for\ generators\r\n
comment43.params=arrow
comment43.target=AlgebraSymbolVector\ getGenerators(int)
comment43.text=\ returns\ the\ generators\ in\ a\ new\ list\r\n\ @arrow\ arrow\ direction\ for\ generators\r\n
comment44.params=sex
comment44.target=AlgebraSymbolVector\ getGenerators(java.lang.String)
comment44.text=\ returns\ the\ generators\ in\ a\ new\ list\r\n\ @sex\ sex\ of\ generators\r\n
comment45.params=
comment45.target=AlgebraSymbolVector\ getGenerators()
comment45.text=\ returns\ the\ generators\ in\ a\ new\ list\r\n
comment46.params=
comment46.target=ListVector\ getDisplayGenerators()
comment46.text=\ returns\ the\ generators\ in\ a\ new\ list\r\n
comment47.params=
comment47.target=EquationVector\ getEquations()
comment47.text=\ returns\ the\ list\ of\ structural\ equations\r\n\ @return\ the\ list\ of\ structural\ equations\r\n
comment48.params=e
comment48.target=boolean\ isEquation(Equation)
comment48.text=\ test\ if\ equation\ is\ present\ in\ the\ algebra\r\n\ @param\ e\ -\ the\ equation\ to\ look\ for\r\n\ @return\ true\ is\ equation\ is\ in\ list\ of\ structural\ equations\r\n
comment49.params=
comment49.target=boolean\ hasIdentityElement()
comment5.params=
comment5.target=Algebra\ getCurrent()
comment5.text=\ static\ procedure\ for\ getting\ the\ current\ algebra\ in\ a\ developmental\ sequence\r\n\ @return\ the\ current\ stage\r\n
comment50.params=a
comment50.target=void\ addIdentityElement(AlgebraSymbol)
comment50.text=\ binds\ the\ identity\ element\ \ and\ adds\ to\ list\ of\ identity\ elements\r\n\ @param\ a\ new\ identity\ element\r\n\ and\ updates\ a\ to\ be\ a\ focal\ element\r\n
comment51.params=a
comment51.target=void\ addFocalElement(AlgebraSymbol)
comment51.text=\ add\ focal\ element\ to\ list\ and\ updates\ a\ to\ be\ a\ focal\ element\r\n\ @param\ a\ new\ focal\ element\r\n
comment52.params=
comment52.target=Equation\ addEquation()
comment52.text=\ adds\ placeholder\ equation\ for\ this\ algebra\r\n\ @return\ the\ Equation\r\n
comment53.params=e
comment53.target=ListVector\ createReciprocalEquation(Equation)
comment53.text=\ Calculate\ reciprocal\ equation\r\n\ @param\ e\ equation\ to\ find\ reciprocal\ for\r\n\ @return\ reciprocal\ equation\ for\ parameter\ equation\r\n
comment54.params=e
comment54.target=Equation\ addEquation(Equation)
comment54.text=\ adds\ equation\ for\ this\ algebra\ --\ checks\ global\ flag\ to\ either\r\n\ accept,\ ask,\ or\ decline\ to\ enter\ the\ reciprocal\ equation\ as\ well\r\n\ all\ other\ forms\ of\ equation\ call\ this\ one\r\n\ @param\ e\ the\ equation\ to\ add\ to\ the\ Algebra\r\n\ @return\ the\ Equation\r\n
comment55.params=e
comment55.target=Equation\ _addEquation(Equation)
comment55.text=\ add\ an\ equation\ checking\ only\ for\ prior\ entry\ of\ the\ equation\r\n\ @param\ e\ the\ equation\ to\ add\ to\ the\ Algebra\r\n\ @return\ the\ Equation\r\n
comment56.params=left\ right
comment56.target=Equation\ addEquation(java.lang.String,\ java.lang.String)
comment56.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ the\ LHS\ of\ equation\ as\ string\ of\ symbol\ names\r\n\ @param\ right\ the\ RHS\ of\ equation\ as\ string\ of\ symbol\ names\r\n\ @return\ the\ new\ equation\r\n
comment57.params=left\ right
comment57.target=Equation\ addEquation(StringVector,\ StringVector)
comment57.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ the\ LHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @param\ right\ the\ RHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @return\ the\ new\ equation\r\n
comment58.params=left\ right
comment58.target=Equation\ addEquation(StringVector,\ java.lang.String)
comment58.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ the\ LHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @param\ right\ the\ RHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @return\ the\ new\ equation\r\n
comment59.params=left\ right
comment59.target=Equation\ addEquation(AlgebraSymbol,\ AlgebraSymbol)
comment59.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ algebra\ symbol\ to\ be\ appended\ to\ the\ LHS\ of\ equation\r\n\ @param\ right\ algebra\ symbol\ to\ be\ appended\ to\ the\ RHS\ of\ equation\r\n\ @return\ the\ new\ equation\r\n
comment6.params=
comment6.target=Algebra\ popCurrent()
comment60.params=left\ right
comment60.target=Equation\ addEquation(AlgebraSymbolVector,\ AlgebraSymbolVector)
comment60.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ the\ LHS\ of\ equation\ as\ list\ of\ algebra\ symbols\ to\ be\ LHS\r\n\ @param\ right\ the\ RHS\ of\ equation\ as\ list\ of\ algebra\ symbols\ to\ be\ RHS\r\n\ @return\ the\ new\ equation\r\n
comment61.params=left\ right
comment61.target=Equation\ makeEquation(StringVector,\ StringVector)
comment61.text=\ adds\ equation\ to\ list\ of\ structural\ equations\ for\ this\ algebra\r\n\ @param\ left\ the\ LHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @param\ right\ the\ RHS\ of\ equation\ as\ list\ of\ symbol\ names\r\n\ @return\ the\ new\ equation\r\n
comment62.params=spath
comment62.target=AlgebraSymbolVector\ makePath(java.lang.String)
comment63.params=spath
comment63.target=AlgebraSymbolVector\ makePath(StringVector)
comment64.params=arrow
comment64.target=AlgebraSymbolVector\ getArrows(int)
comment65.params=
comment65.target=AlgebraSymbolVector\ getUpArrows()
comment66.params=
comment66.target=AlgebraSymbolVector\ getDownArrows()
comment67.params=updown
comment67.target=AlgebraSymbolVector\ getUpOrDownArrows(int)
comment68.params=
comment68.target=AlgebraSymbolVector\ getSideArrows()
comment69.params=
comment69.target=AlgebraSymbolVector\ getLeftSideArrows()
comment7.params=a
comment7.target=Algebra\ pushCurrent(Algebra)
comment70.params=
comment70.target=AlgebraSymbolVector\ getRightSideArrows()
comment71.params=
comment71.target=AlgebraSymbolVector\ getSpouseArrows()
comment72.params=sex
comment72.target=AlgebraSymbolVector\ getSexMarkedGenerators(java.lang.String)
comment73.params=
comment73.target=AlgebraSymbolVector\ getSexGenerators()
comment74.params=eq
comment74.target=boolean\ isPCI_EquationVariant(Equation)
comment75.params=as\ arrow
comment75.target=boolean\ isArrow(AlgebraSymbol,\ int)
comment76.params=a
comment76.target=boolean\ isAlmostRightIdentity(AlgebraSymbol)
comment77.params=a
comment77.target=boolean\ isAlmostLeftIdentity(AlgebraSymbol)
comment78.params=a\ gens
comment78.target=boolean\ _isAlmostLeftIdentity(AlgebraSymbol,\ AlgebraSymbolVector)
comment79.params=a\ gens
comment79.target=boolean\ _isAlmostRightIdentity(AlgebraSymbol,\ AlgebraSymbolVector)
comment8.params=add
comment8.target=void\ setAddReciprocalEquations(int)
comment80.params=
comment80.target=boolean\ enterSpouseTerm()
comment81.params=s
comment81.target=boolean\ enterSpouseTerm(java.lang.String)
comment82.params=s\ t
comment82.target=boolean\ enterSpouseTerm(java.lang.String,\ java.lang.String)
comment83.params=
comment83.target=void\ constructIDEquations()
comment83.text=\ create\ explicit\ id\ equation\ for\ each\ generator\r\n
comment84.params=a
comment84.target=Algebra\ makeAlgebraJoinOLD(Algebra)
comment84.text=\ constucts\ smallest\ algebra\ containing\ two\ given\ algebras\r\n\ @param\ a\ the\ algebra\ to\ be\ joined\ to\ this\r\n\ @return\ the\ new\ algebra\r\n
comment85.params=a
comment85.target=Algebra\ makeAlgebraJoinXX(Algebra)
comment85.text=\ constructs\ smallest\ algebra\ containing\ two\ given\ algebras\r\n\ @param\ a\ the\ algebra\ to\ be\ joined\ to\ this\r\n\ @return\ the\ new\ algebra\r\n
comment86.params=a
comment86.target=Algebra\ makeAlgebraJoinSameId(Algebra)
comment87.params=a
comment87.target=Algebra\ makeAlgebraJoinOLD2(Algebra)
comment88.params=a
comment88.target=Algebra\ makeAlgebraJoinDifferentId(Algebra)
comment89.params=eq
comment89.target=boolean\ isSexGeneratorEquation(Equation)
comment89.text=\ adds\ equations\ of\ form\ Pp\=PP\ where\ P\ and\ p\ are\ in\ the\ same\r\n\ direction\ but\ differ\ in\ sex\ marking\r\n
comment9.params=
comment9.target=int\ getAddReciprocalEquations()
comment90.params=
comment90.target=void\ addSibAnalogousEquations()
comment90.text=\ if\ xy\=w\ is\ an\ equation,\ y\ and\ Y\ are\ sibs\ then\r\n\ make\ xY\=\ w\ an\ equation\r\n
comment91.params=asv1\ asv2\ flag
comment91.target=void\ makeEquivalentElementEquation(AlgebraSymbolVector,\ AlgebraSymbolVector,\ boolean)
comment91.text=\t\t\ if\ (id.size()\ >\ 1)\ addSexIdEquations();//use\ with\ trobriand;\ id1\ and\ id2\ and\ sex\ marked\r\n\t\t//\ addPCEquations(id);\r\n\t\taddMixedSexSameArrowEquations();\r\n\t\t//if\ (id.size()\ \=\=\ 2)\r\n\t\t\ \ \ //\ addSibAnalogousEquations();//trobriand\r\n\t\t//addAnalogousEquations(id);\r\n\t\taddAnalogousEquations();\r\n\t\t//if\ (id.size()\ \=\=\ 2)\r\n\t\t\ \ //\ addCrowSkewingEquations();\r\n\t\t//makeElementsEquivalent();\r\n\t\tif\ (id.size()\ >\ 1)\ {\r\n\t\t\tif\ (singleFlag)\ {\r\n\t\t\t\taddSingleChildEquations();//\ S,D,i,I\ -->\ Si\ \=\ S,\ DI\ \=\ D\r\n\t\t\t\tlinkElementProductEquations(1,Bops.DOWN);//S,\ D-->\ S&D\r\n\t\t\t}\ else\ {\r\n\t\t\t\taddOlderYoungerSibProducts();//BIfemale\=Ifemale,bIfemale\=Ifemale,etc.\r\n\t\t\t\tequateChildElements(sex1);//Ai&E,\ A&EI\r\n\t\t\t\tequateTheCrossCousins(sex2);//AiI&EiI,AIi&EIi\r\n\t\t\t\taddCrossCousinEquation();//EIG\=i,AiP\=I,\r\n\t\t\t\taddParentChildProductEquation();//logical\:\ FSi\=0,FDi\=0,MDI\=0,MSI\=0\r\n\t\t\t\taddSibChildProducts();//ZAi\ \=\ Ai,\ etc.based\ on\ MER\ rule\r\n\t\t\t\taddParentChildProducts();//P(Si_&Di_)\=0,\ etc.,\ uses\ MER\ rule\r\n\t\t\t\taddChildSibParentProducts();//ABP\ \=\ B\ (SB+F\ \=\ B+),\ etc.\r\n\t\t\t}\r\n\t\t\tlinkMaleFemaleElementEquations();//assumes\ grandparent,\ grandchild,\ etc\ e.g.tongan,\ trobriand\r\n\t\t}\r\n/*\t\tMakeEquivalentRule\ rule\ \=\ (MakeEquivalentRule)\ RuleFactory.getRule(RuleFactory.MAKEEQUIVALENTRULE);\r\n\t\tListVector\ lv\ \=\ rule.getEquivalentElements();\r\n\t\tfor\ (lv.reset();lv.isNext();){\r\n\t\t\ \ \ \ ListVector\ lv1\ \=\ (ListVector)lv.getNext();\r\n\t\t\tSystem.out.println("\ eqv1\ "+lv1.elementAt(0)+"\ eqv\ 2\ "+lv1.elementAt(1));\r\n\t\t}\r\n\t\tRewriteProductRule\ rule1\ \=\ (RewriteProductRule)\ RuleFactory.getRule(RuleFactory.REWRITEPRODUCTRULE);;\r\n\t\tlv\ \=\ rule1.getEquivalentProducts();\r\n\t\tfor\ (lv.reset();lv.isNext();){\r\n\t\t\ \ \ \ ListVector\ lv1\ \=\ (ListVector)lv.getNext();\r\n\t\t\tSystem.out.println("\ eqvA\ "+lv1.elementAt(0)+"\ eqv\ B\ "+lv1.elementAt(1));\r\n}
comment92.params=sex
comment92.target=void\ equateFocalElementEquation3X(java.lang.String)
comment93.params=lSide\ rSide
comment93.target=void\ putInRewriteProductRule(ListVector,\ ListVector)
comment94.params=a
comment94.target=Algebra\ makeAlgebraJoin(Algebra)
comment94.text=\tvoid\ makeElementsEquivalent(){\r\n\t\ \ \ EquationVector\ eqv\ \=\ getEquations();\r\n\t\tAlgebraSymbolVector\ ft\ \=\ getFocalElements();\r\n\t\tfor\ (eqv.reset();eqv.isNext();){\r\n\t\t\ \ \ Equation\ eq\ \=\ eqv.getNext();\r\n\t\t\ \ \ if\ (eq.getRhs().size()\ >\ 1)\ {\r\n\t\t\t\tif\ (eq.getLhs().size()\ \!\=\ eq.getRhs().size())\ continue;\r\n\t\t\t\tif\ (\!eq.getLhs().sameSex()\ ||\ \!eq.getRhs().sameSex())\ continue;\r\n\t\t\t\tAlgebraSymbol\ asl\ \=\ eq.getLhs().getFirst();\r\n\t\t\t\tAlgebraSymbol\ asr\ \=\ eq.getRhs().getFirst();\r\n\t\t\t\tif\ (asl.getArrowType()\ \=\=\ Bops.UP\ &&\ asr.getArrowType()\ \!\=\ Bops.DOWN)\ continue;\r\n\t\t\t\tif\ (asl.getArrowType()\ \=\=\ Bops.DOWN\ &&\ asr.getArrowType()\ \!\=\ Bops.UP)\ continue;\r\n\t\t\t\tif\ (asl.getArrowType()\ \=\=\ Bops.LEFT\ &&\ asr.getArrowType()\ \!\=\ Bops.RIGHT)\ continue;\r\n\t\t\t\tif\ (asl.getArrowType()\ \=\=\ Bops.RIGHT\ &&\ asr.getArrowType()\ \!\=\ Bops.LEFT)\ continue;\r\n\t\t\t\tAlgebraPath\ pl\ \=\ new\ AlgebraPath(eq.getLhs());\r\n\t\t\t\tAlgebraPath\ pr\ \=\ new\ AlgebraPath(eq.getRhs());\r\n\t\t\t\tpl.makeEquivalentPath(pr);\r\n\t\t\ \ \ }\r\n\t\t}\r\n}
comment95.params=sibGen
comment95.target=boolean\ addReciprocalEquations(boolean)
comment96.params=
comment96.target=boolean\ isMixedPattern()
comment97.params=as
comment97.target=void\ removeSexMarking(AlgebraSymbol)
comment97.text=\ change\ sex\ marking\ to\ "N"\ for\ specified\ element\r\n\ @as\ set\ sex\ marking\ of\ as\ to\ "N"\r\n
comment98.params=
comment98.target=void\ removeRedundancy()
comment98.text=\ remove\ redundant\ elements\ and\ equations\r\n
comment99.params=sex
comment99.target=void\ addLeftSexGeneratorProducts(java.lang.String)
numComments=105
