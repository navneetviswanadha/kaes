#BlueJ class context
comment0.target=AlgebraPath
comment0.text=\ needs\ generators\ set\ using\ addGenerator,\ Equations\ via\ addEquation\r\nGenerates\ a\ path\ segment\ relative\ to\ the\ focal\ element\ used\ to\ initialize.\r\n
comment1.params=
comment1.target=void\ setFocalElement()
comment10.params=thePath\ reduce
comment10.target=AlgebraPath(AlgebraSymbolVector,\ boolean)
comment10.text=\ probably\ should\ reduce\ thePath\ before\ pushing\ on\ stacks\r\n
comment11.params=thePath\ theReducedPath
comment11.target=AlgebraPath(AlgebraSymbolVector,\ AlgebraSymbolVector)
comment12.params=focalE
comment12.target=AlgebraPath(AlgebraSymbol)
comment13.params=a\ b
comment13.target=AlgebraPath(AlgebraSymbol,\ AlgebraSymbol)
comment14.params=a\ b\ c
comment14.target=AlgebraPath(AlgebraSymbol,\ AlgebraSymbol,\ AlgebraSymbol)
comment15.params=
comment15.target=AlgebraPath()
comment16.params=
comment16.target=void\ fail()
comment17.params=
comment17.target=void\ succeed()
comment18.params=a
comment18.target=boolean\ product(AlgebraSymbol)
comment18.text=\tpublic\ void\ applyRules(RuleVector\ someRules,\ AlgebraPath\ somePath)\ {\r\n\t\tfor(someRules.reset();someRules.isNext();)\ {\r\n\t\t\tRule\ rule\ \=\ (Rule)\ someRules.getNext();\r\n\t\t\tif\ (\!rule.getActiveRule())\ continue;\r\nSystem.out.println("RULE\ "+rule+"\ soomepatbh\ "+somePath);\r\n\t\t\tif\ (rule.doesRuleApply(somePath))\ {\r\n\t\t\t\trule.applyRule(somePath);\r\n\t\t\t\tSystem.out.println("did\ somepath\ "+somePath);\r\n\t\t\t}\r\n\t\t}\r\n}
comment19.params=
comment19.target=boolean\ nextPath()
comment2.params=
comment2.target=void\ setIdentityElement()
comment20.params=x
comment20.target=void\ addGenerators(AlgebraSymbolVector)
comment21.params=e
comment21.target=void\ addEquations(EquationVector)
comment22.params=
comment22.target=AlgebraSymbol\ current()
comment23.params=i
comment23.target=void\ setFocalElement(AlgebraSymbol)
comment24.params=i
comment24.target=void\ setIdentityElement(AlgebraSymbol)
comment25.params=path
comment25.target=boolean\ reducePath(AlgebraSymbolVector)
comment26.params=aPath\ aReducedPath
comment26.target=boolean\ _reducePath(AlgebraSymbolVector,\ AlgebraSymbolVector)
comment27.params=spath
comment27.target=boolean\ reducePath(java.lang.String)
comment27.text=\ \ \ \ boolean\ _reducePath(AlgebraSymbolVector\ path)\ {\ //\ \ .\ generates\ reduction\ of\ path\ segment\r\n\t\ \ \ \ boolean\ ret\ \=\ true;\r\n\t\ \ \ \ reducedPath\ \=\ new\ AlgebraSymbolVector(2,2);\r\n\t\ \ \ \ for\ (int\ i\ \=\ 0;i<\ path.size();i++)\ {\r\n\t\t\ \ \ \ AlgebraSymbol\ a\ \=\ path.getSymbol(i);\r\n\t\t\ \ \ \ a.getProduct(reducedPath);\r\n\t\t\ \ \ \ if\ (reduce(ht))\ {\r\n\t\t\t\ \ \ \ if\ (\!reduce(ht))\ {\r\n\t\t\t\ \ \ \ }\r\n\t\t\ \ \ \ }\r\n\t\t\ \ \ \ if\ (reducedPath.size()\ \=\=\ 0)\ {\r\n\t\t\t\ \ \ \ //\ mindful\ changing\ to\ accommodate\ "0"\ in\ path\r\n\t\t\t\ \ \ \ //\ reducedPath.addElement(Algebra.getCurrent().getElement("0"));\r\n\t\t\t\ \ \ \ \ ret\ \=\ false;\r\n\t\t\t\ \ \ \ \ break;\r\n\t\t\ \ \ \ }\r\n\t\ \ \ \ }\r\n\t\ \ \ \ return\ ret;\r\n}
comment28.params=path
comment28.target=boolean\ reducePathLR(AlgebraSymbolVector)
comment29.params=spath
comment29.target=boolean\ reducePathLR(java.lang.String)
comment3.params=a
comment3.target=boolean\ equals(java.lang.Object)
comment30.params=
comment30.target=AlgebraSymbolVector\ getProductPath()
comment31.params=asv
comment31.target=void\ setProductPath(AlgebraSymbolVector)
comment32.params=
comment32.target=AlgebraSymbolVector\ getReducedProductPath()
comment33.params=asv
comment33.target=void\ setReducedProductPath(AlgebraSymbolVector)
comment34.params=e
comment34.target=boolean\ isMixedSexSameArrowEquation(Equation)
comment35.params=ht
comment35.target=boolean\ reduce(java.util.Hashtable)
comment36.params=stk\ ht
comment36.target=boolean\ reduce(AlgebraSymbolStack,\ java.util.Hashtable)
comment37.params=
comment37.target=boolean\ reduceLR()
comment38.params=stk
comment38.target=boolean\ reduceLR(AlgebraSymbolStack)
comment39.params=
comment39.target=java.lang.String\ getPathSex()
comment4.params=a
comment4.target=boolean\ equalsFull(AlgebraPath)
comment40.params=
comment40.target=java.lang.String\ getPathFirstSex()
comment41.params=
comment41.target=boolean\ isEquivalentPath()
comment42.params=
comment42.target=boolean\ isReducedEquivalentPath()
comment43.params=
comment43.target=AlgebraPath\ getEquivalentPathRightX()
comment44.params=
comment44.target=AlgebraPath\ getReducedEquivalentPathRight()
comment45.params=
comment45.target=AlgebraPath\ getEquivalentPathRight()
comment46.params=
comment46.target=AlgebraPath\ getReducedEquivalentPathLeft()
comment47.params=
comment47.target=AlgebraPath\ getEquivalentPathLeftXX()
comment48.params=
comment48.target=AlgebraPath\ getEquivalentPathLeft()
comment49.params=
comment49.target=boolean\ isReducedPath()
comment49.text=\ \ \ public\ AlgebraPath\ getEquivalentPathLeftX(){\r\n\t\tAlgebraPath\ p\ \=\ new\ AlgebraPath();\r\n\t\tboolean\ startFlag\ \=\ false;\r\n\t\tfor\ (reducedPath.reset();reducedPath.isNext();){\r\n\t\t\tAlgebraSymbol\ as\ \=\ reducedPath.getNext();\r\n\t\t\tif\ (startFlag)\ {\r\n\t\t\t//path.product(as);\r\n\t\t\tp.path.addToEnd(as);\r\n\t\t\tp.reducedPath.addToEnd(as);\r\n\t\t\t}\r\n\t\t\tif\ (\!startFlag)\ startFlag\ \=\ (as.getValue().equals("&"));\r\n\t\t}\r\n\t\tif\ (\!startFlag)\ return\ this;\r\n\t\t//System.out.println("THE\ PATH\ IS\ "+path);\r\n\t\telse\ return\ p;\r\n}
comment5.params=
comment5.target=java.lang.String\ toString()
comment50.params=product
comment50.target=void\ pathProduct(AlgebraPath)
comment50.text=\ construct\ product\ without\ reducing\ the\ path\r\n\ @thePath\ path\ with\ which\ product\ is\ taken\r\n\ @product\ product\ of\ the\ path\r\n
comment51.params=prod
comment51.target=AlgebraPath\ makeEquivalentPath(AlgebraPath)
comment51.text=\r\n\ combine\ two\ paths\ into\ equivalent\ path\ form;\ does\ not\ test\ for\ equivalence\r\n\ @prod\ one\ path\r\n\ @this\ other\ path\r\n\ @return\ equivalent\ path\r\n
comment52.params=
comment52.target=AlgebraPathVector\ algPathToVector()
comment52.text=\ converts\ equivalent\ path\ A&B\ into\ vector\ form\ [A,\ B]\r\n\ @return\ algebraPathVector\r\n
comment53.params=
comment53.target=AlgebraPathVector\ algPathToVectorx()
comment6.params=
comment6.target=java.lang.String\ toString1()
comment7.params=
comment7.target=java.lang.Object\ clone()
comment8.params=
comment8.target=java.lang.Object\ clone1()
comment9.params=s
comment9.target=int\ countSymbol(java.lang.String)
numComments=54
