/*
	A basic extension of the java.awt.Frame class
 */
/*
* see line 188 for a temporary fix of message windoes
*/
//import ice.htmlbrowser.Browser;
//import ice.htmlbrowser.ICEBrowser;
import java.awt.*;

public class MessageFrame extends Frame implements MessageAction
{
	public MessageFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		GridBagLayout gridBagLayout;
		gridBagLayout = new GridBagLayout();
		setLayout(gridBagLayout);
		setVisible(false);
		setSize(745,636);
		// messagePanel1 = new MessagePanel();
		// messagePanel1.setLayout(null);
		// messagePanel1.setBounds(0,0,666,628);
		// messagePanel1.setFont(new Font("SansSerif", Font.PLAIN, 12));
		// messagePanel1.setBackground(new Color(-820));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 0.5;
		gbc.anchor = GridBagConstraints.NORTHWEST;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0,0,0,0);
		//((GridBagLayout)getLayout()).setConstraints(messagePanel1, gbc);
		// add(messagePanel1);
		setTitle("Messages");
		//}}

		//{{INIT_MENUS
		makeMenus = new MakeMenus();
		setMenuBar(makeMenus.mainmenuBar);
		mainmenuBar = makeMenus.mainmenuBar;
		//$$ mainmenuBar.move(0,0);
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		try {
			String lx = System.getProperty("user.dir");
			// messagePanel1.infoPanel.setDocumentBaseString(getClass().getResource("KaesHelp").toString());
			// messagePanel1.infoPanel.setCurrentLocation("KaesHelp/Start.html");
		} catch (Exception e) {e.printStackTrace();}
		GlobalWindowManager.addWindow(this);
		//dismissButton.addActionListener(lSymAction);
		//helpMenuItem.addActionListener(lSymAction);
		//}}
		makeMenus.mainmenuBar.add(GlobalWindowManager.windowsMenu);
	}
	
	MakeMenus makeMenus;

	public MessageFrame(String title)
	{
		this();
		setTitle(title);
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	// MessagePanel messagePanel1;
	//}}

	//{{DECLARE_MENUS
	java.awt.MenuBar mainmenuBar;
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MessageFrame.this)
				HelpFrame_WindowClosing(event);
		}

		public void windowActivated(java.awt.event.WindowEvent event) {
			mainmenuBar.add(GlobalWindowManager.windowsMenu);
			super.windowActivated(event);
		}
		public void windowDeactivated(java.awt.event.WindowEvent event) {
			hide();
			super.windowActivated(event);
		}
	}
	
	void HelpFrame_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
	/*		if (object == helpMenuItem)
				helpMenuItem_ActionPerformed(event); */
		}
	}

/*	void dismissButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Hide the HelpFrame
		setVisible(false);
		//}}
	}
	
	public void doHelp(String helpItem) {
		show();
	}
	
	public void doHelp() {
		show();
	}

	void helpMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		// Request the focus
		doHelp("AddElement");
		//}}
	}
	*/
	public void removeMessages() {
		// messagePanel1.removeMessages();
	}
	
	public void addMessage(Message m) {
		addMessage(new MessageLine(m));
		Frame f = GlobalWindowManager.getCurrentWindow();
		if (f instanceof KintermFrame) {
			((KintermFrame) f).errorTextArea.append(m.getMessageTitle()+": "+m.getMessageLevel()+XML.Eol);
			//((KintermFrame) f).errorTextArea.append(m.getMessageSummary()+XML.Eol+XML.Eol);
		} else if (f instanceof Kaes) {
			((Kaes)f).messageText.append(m.getMessageTitle()+": "+m.getMessageLevel()+XML.Eol);
		}
	}
	
	public void addMessage(MessageLine m) {
	//	if (!this.isVisible()) show();
		if (m.messageRef.getMessageLevel() < 0) {
			if (!this.isVisible()) show();
			this.toFront();
		}
		// messagePanel1.addMessage(m);
	}
	
	public void doHelp(String helpItem) {
		if (helpItem != null)
			try {
				// messagePanel1.infoPanel.setCurrentLocation(helpItem+".html");
			} catch (Exception e) {e.printStackTrace();}
		
		show();
	}
	
	public void go(Message m) {
		setMessageRef(m);
		doHelp(m.getMessageURL());
	}

	public void setMessageRef(Message m) {
		messageRef = m;
		setMessageAlert(getMessageAlert());
		setMessageURL(m.getMessageURL());
		setMessageLevel(m.getMessageLevel());
		setMessageSummary(m.getMessageSummary());
		setMessageAction(m.getMessageAction());
	}

	public void setMessageURL(String messageURL) {
		messageRef.messageURL = messageURL;
	}

	public String getMessageURL() {
		return messageRef.messageURL;
	}
	protected Message messageRef=null;

	void actionButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (messageRef.messageAction != null)
			messageRef.messageAction.go(messageRef);
		//}}
	}

	public void setActionLabel(String actionLabel) {
		messageRef.actionLabel = actionLabel;
		//actionButton.setLabel(actionLabel);
	}

	public String getActionLabel() {
		return messageRef.actionLabel;
	}
	public void setMessageAlert(String messageTitle) {
		messageRef.messageTitle = messageTitle;
		//oneLineAlertLabel.setText(messageTitle);
	}

	public String getMessageAlert() {
		return messageRef.messageTitle;
	}

	public void setMessageLevel(int messageLevel) {
		messageRef.messageLevel = messageLevel;
		//priorityLabel.setText(messageLevel+"");
	}

	public int getMessageLevel() {
		return messageRef.messageLevel;
	}

	public void setMessageSummary(String messageSummary) {
		messageRef.messageSummary = messageSummary;
		// messagePanel1.detailText.setText(messageSummary);
	}

	public String getMessageSummary() {
		return messageRef.messageSummary;
	}

	public void setMessageAction(MessageAction messageAction) {
		messageRef.messageAction = messageAction;
	}

	public Object getMessageAction() {
		return messageRef.messageAction;
	}

	public void setMessageAlert(boolean messageAlert) {
		messageRef.messageAlert = messageAlert;
	}

	public boolean isMessageAlert() {
		return messageRef.messageAlert;
	}

	public void setMessageIcon(java.net.URL messageIcon) {
		messageRef.messageIcon = messageIcon;
	}

	public java.net.URL getMessageIcon() {
		return messageRef.messageIcon;
	}



}
