import java.awt.*;
import java.net.URL;
import java.awt.Dimension;
import java.awt.Panel;



public class MessageLine extends java.awt.Panel implements MessageAction
{
	//insert class definition here

	static MessageFrame theMessenger = new MessageFrame();
	static MessageFrame theHelper = theMessenger;
//	static HelpMessageFrame theHelper = new HelpMessageFrame();
	
	public MessageLine()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(605,24);
		priorityLabel.setText("Hi");
		priorityLabel.setAlignment(java.awt.Label.RIGHT);
		add(priorityLabel);
		priorityLabel.setFont(new Font("Serif", Font.BOLD, 10));
		priorityLabel.setBounds(5,2,37,16);
		oneLineAlertLabel.setText("text");
		add(oneLineAlertLabel);
		oneLineAlertLabel.setFont(new Font("Serif", Font.BOLD, 12));
		oneLineAlertLabel.setBounds(50,2,448,18);
		actionButton.setLabel("Details");
		add(actionButton);
		actionButton.setFont(new Font("SansSerif", Font.BOLD, 10));
		actionButton.setBounds(510,4,61,15);
		add(iconCanvas);
		iconCanvas.setBounds(573,0,22,22);
		//}}
	
		//{{REGISTER_LISTENERS
		SymAction lSymAction = new SymAction();
		actionButton.addActionListener(lSymAction);
		//}}
		messageRef = new Message("No Message", "No Message has been posted",null,99);
	}

	
	//{{DECLARE_CONTROLS
	java.awt.Label priorityLabel = new java.awt.Label();
	java.awt.Label oneLineAlertLabel = new java.awt.Label();
	java.awt.Button actionButton = new java.awt.Button();
	java.awt.Canvas iconCanvas = new java.awt.Canvas();
	//}}

	public MessageLine(Message m) {
		this();
		messageRef = m;
		oneLineAlertLabel.setText(m.getMessageTitle());
		priorityLabel.setText(m.getMessageLevel()+"");
		setBackgroundColour();
	}

	public void setBackgroundColour() {
		Color bg = Color.red;
		Color tx = Color.white;

		if (messageRef.getMessageLevel() > 33) {
			bg = Color.orange;
			tx = Color.white;
		}
		if (messageRef.getMessageLevel() > 66) {
			bg = Color.green;
			tx = Color.black;
		}
		setBackground(bg);
		setForeground(tx);
	}

	/** 
     * Returns the minimum size of this container.  
     * @see #getPreferredSize
     */
    public Dimension getMinimumSize() {
		java.awt.Dimension supersResult = super.getMinimumSize();

		// to do: place event handler code here.
		// modify the return from the super, or return your own result

		return supersResult;
	}

	/** 
     * Returns the preferred size of this container.  
     * @see #getMinimumSize
     */
    public Dimension getPreferredSize() {
		java.awt.Dimension supersResult = super.getPreferredSize();
		supersResult.width = 640;supersResult.height=32;

		// to do: place event handler code here.
		// modify the return from the super, or return your own result

		return supersResult;
	}

	protected Message messageRef=null;
	protected java.net.URL messageIcon=null;

	public void addToMessenger() {
	    theMessenger.addMessage(this);
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == actionButton)
				actionButton_ActionPerformed(event);
		}
	}

	void actionButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		go(messageRef);
		//}}
	}

	/** 
     * Paints the container.  This forwards the paint to any lightweight components 
     * that are children of this container.  If this method is reimplemented, 
     * super.paint(g) should be called so that lightweight components are properly
     * rendered.  If a child component is entirely clipped by the current clipping
     * setting in g, paint() will not be forwarded to that child.
     *
     * @param g the specified Graphics window
     * @see   java.awt.Component#update(java.awt.Graphics)
     */
    public void paint(Graphics g) {
		super.paint(g);

		// to do: place event handler code here.
		g.drawRect(1,1,getSize().width-2,getSize().height-2);
	}

	
	public void go(Message m) {
		theHelper.go(m);
	}

}
