#BlueJ class context
comment0.target=KintermEntry
comment0.text=\ Individual\ element/entity\ in\ the\ kin\ term\ map\r\n
comment1.params=
comment1.target=void\ registerListeners()
comment10.params=
comment10.target=java.lang.String\ getTheTerm()
comment10.text=\ get\ the\ kinship\ term.\r\n\ @returns\ the\ kinship\ term\r\n
comment11.params=sex
comment11.target=void\ setSex(java.lang.String)
comment11.text=\ Set\ the\ sex\ or\ gender\ of\ the\ kinship\ term\r\n\ internally\ stored\ as\ M\ for\ male,\ F\ for\ female\ and\ N\ for\ neutral\r\n\ @param\ sex\ the\ gender\ of\ the\ kinship\ term\r\n
comment12.params=
comment12.target=java.lang.String\ getSex()
comment12.text=\ Get\ the\ sex\ or\ gender\ of\ the\ kinship\ term\r\n\ internally\ stored\ as\ M\ for\ male,\ F\ for\ female\ and\ N\ for\ neutral\r\n\ @returns\ the\ gender\ of\ the\ kinship\ term\r\n
comment13.params=generating
comment13.target=void\ setGenerating(boolean)
comment13.text=\ Set\ or\ clear\ this\ as\ a\ generating\ kinship\ term.\ The\ generating\ terms\ or\ elements\ are\ kinship\ terms\r\n\ that\ form\ products\ with\ the\ current\ term,\ resulting\ in\ a\ kinship\ term\ (or\ terms).\r\n\ For\ example\ in\ AKT\ using\ Parent\ as\ a\ generating\ term,\ self\ x\ Parent\ \=\ Parent.\ Parent\ x\ Parent\ \=\ Grandparent.\r\n\ In\ the\ present\ formulation\ a\ generating\ term\ must\ have\ a\ Sex\ and\ an\ orientation\ (UP,\ Down\ Right\ or\ Left,\r\n\ for\ ancestral,\ descendent,\ collateral+\ and\ collateral-.\ The\ meanings\ of\ these\ are\ specific\ to\ specific\r\n\ terminologies.\r\n\ All\ generators\ exist\ for\ all\ members\ of\ KintermEntry\ in\ the\ same\ Container.\ That\ is,\ when\ a\ generator\ is\ defined\r\n\ it\ is\ entered\ into\ a\ table\ for\ each\ KintermEntry\ component\ in\ the\ parent\ Container,\ though\ the\ specific\ products\r\n\ will\ be\ unique\ to\ each\ term.\r\n\ Initially\ there\ is\ one\ default\ generating\ term,\ called\ kin,\ that\ has\ a\ sex\ of\ N\ and\ an\ orientation\ of\ NONE\ (-1).\ No\r\n\ other\ generators\ can\ have\ an\ orientation\ of\ NONE,\ and\ the\ KintermMap\ is\ not\ complete\ until\ there\ are\ no\ lines\r\n\ with\ an\ orientation\ of\ NONE.\r\n\ @param\ generating\ the\ generating\ status\ of\ the\ kinship\ term\r\n
comment14.params=orientation
comment14.target=void\ setOrientation(int)
comment14.text=\ Set\ the\ orientation\ for\ a\ generator.\ Makes\ a\ generator\ if\ the\ term\ is\ not\r\n\ \ \ already\ a\ generator.\ This\ procedure\ prevents\ a\ singe\ term\ having\ two\ orientations.\r\n\ \ \ Check\ out\ the\ other\ structures\ to\ see\ if\ it\ is\ possible\ to\ allow\ this,\ though\r\n\ \ \ multiple\ orientations\ would\ require\ some\ means\ of\ having\ them\ set\ other\ than\r\n\ \ \ the\ ones\ currently\ provided\ by\ the\ user\ interface.\r\n\ \ \ @param\ orientation\ -\ the\ orientation\ to\ set\ or\ reset\r\n
comment15.params=index
comment15.target=void\ deleteGenerator(int)
comment16.params=
comment16.target=void\ deleteThisAsGenerator()
comment16.text=\ Remove\ this\ as\ a\ generator\ if\ the\ term\ is\ already\ a\ generator.\r\n
comment17.params=k\ orient
comment17.target=void\ addGenerator(KintermEntry,\ int)
comment17.text=\ adds\ a\ Generator\ to\ the\ product\ set\ of\ this\ term\r\n\ @param\ k\ the\ KintermEntry\ that\ has\ been\ made\ a\ generator\r\n\ @param\ orient\ the\ orientation\ of\ the\ generator\r\n
comment18.params=orientation
comment18.target=void\ addThisAsGenerator(int)
comment18.text=\ adds\ this\ as\ Generator\ to\ its\ product\ set\ and\ all\ other\ terms\r\n\ @param\ orientation\ the\ orientation\ of\ this\ generator\r\n
comment19.params=
comment19.target=void\ redrawOthers()
comment19.text=\ redraw\ all\ terms\r\n
comment2.params=
comment2.target=KintermEntry()
comment20.params=
comment20.target=boolean\ isGenerating()
comment20.text=\ Is\ this\ a\ generating\ kinship\ term?\ The\ generating\ terms\ or\ elements\ are\ kinship\ terms\r\n\ that\ form\ products\ with\ the\ current\ term,\ resulting\ in\ a\ kinship\ term\ (or\ terms).\r\n\ For\ example\ in\ AKT\ using\ Parent\ as\ a\ generating\ term,\ self\ x\ Parent\ \=\ Parent.\ Parent\ x\ Parent\ \=\ Grandparent.\r\n\ In\ the\ present\ formulation\ a\ generating\ term\ must\ have\ a\ Sex\ and\ an\ orientation\ (UP,\ Down\ Right\ or\ Left,\r\n\ for\ ancestral,\ descendent,\ collateral+\ and\ collateral-.\ The\ meanings\ of\ these\ are\ specific\ to\ specific\r\n\ terminologies.\r\n\ @return\ the\ generating\ status\ of\ the\ kinship\ term\r\n
comment21.params=
comment21.target=java.awt.Dimension\ getMinimumSize()
comment21.text=\r\n\ Returns\ the\ minimum\ size\ of\ this\ container.\r\n\ @see\ \#getPreferredSize\r\n
comment22.params=
comment22.target=java.awt.Dimension\ getPreferredSize()
comment22.text=\r\n\ Returns\ the\ preferred\ size\ of\ this\ container.\r\n\ @see\ \#getMinimumSize\r\n
comment23.params=theColor\ arrowType
comment23.target=java.awt.Color\ setArrowColor(java.awt.Color,\ int)
comment24.params=theColor\ arrowType
comment24.target=java.awt.Color\ setTabColor(java.awt.Color,\ int)
comment25.params=theColor\ arrowType
comment25.target=java.awt.Color\ setRectColor(java.awt.Color,\ int)
comment26.params=theColor
comment26.target=java.awt.Color\ setTermColor(java.awt.Color)
comment27.params=g
comment27.target=void\ paint(java.awt.Graphics)
comment27.text=\r\n\ Paints\ the\ container.\ \ This\ forwards\ the\ paint\ to\ any\ lightweight\ components\r\n\ that\ are\ children\ of\ this\ container.\ \ If\ this\ method\ is\ reimplemented,\r\n\ super.paint(g)\ should\ be\ called\ so\ that\ lightweight\ components\ are\ properly\r\n\ rendered.\ \ If\ a\ child\ component\ is\ entirely\ clipped\ by\ the\ current\ clipping\r\n\ setting\ in\ g,\ paint()\ will\ not\ be\ forwarded\ to\ that\ child.\r\n\r\nThis\ paint\ draws\ lines\ between\ the\ different\ members\ of\ KintermEntry\ in\ the\ same\ Container\ by\ calling\r\n\ a\ routine\ in\ the\ parent\ Container,\ which\ must\ conform\ to\ Interface\ KintermEditor.\ These\ lines\ thus\r\n\ exist\ in\ the\ parent\ coordinate\ space.\r\n\ @param\ g\ the\ specified\ Graphics\ window\r\n\ @see\ \ \ java.awt.Component\#update(java.awt.Graphics)\r\n
comment28.params=g
comment28.target=void\ drawProducts(java.awt.Graphics)
comment29.params=x\ y
comment29.target=LineObject\ searchLines(int,\ int)
comment3.params=v
comment3.target=KintermEntry(Variables)
comment30.params=g
comment30.target=void\ setRectangles(java.awt.Graphics)
comment30.text=\ \ routine\ to\ locate\ the\ various\ hook\ widgets\ on\ the\ terms\ border\r\n\ \ \ \ @param\ g\ the\ Graphics\ context\ to\ do\ the\ FontMetrics.\ Possibly\ change\ in\ future\ to\ send\ FontMetrics\ instead.\r\n
comment31.params=x\ y
comment31.target=int\ whatHook(int,\ int)
comment31.text=\ are\ we\ in\ a\ hook\r\n\ \ \ \ @returns\ UP,\ DOWN,\ RIGHT,\ LEFT,\ NONE\r\n
comment32.params=x\ y
comment32.target=int\ whatHookReceptor(int,\ int)
comment33.params=x\ y
comment33.target=int\ whatHook2(int,\ int)
comment34.params=sex
comment34.target=java.awt.Color\ getSexColour(int)
comment35.params=p
comment35.target=KintermEntry\ findTerm(java.awt.Point)
comment35.text=\ finds\ a\ KintermEntry\ term\ in\ the\ same\ Container\ that\ contains\ Point\ p.\ p\ is\ in\ Parent\ coordinates\r\n\ @param\ p\ The\ point\ used\ to\ locate\ ithe\ KintermEntry\r\n\ @returns\ a\ KintermEntry\ or\ null\ if\ not\ found\r\n
comment36.params=name
comment36.target=KintermEntry\ findTerm(java.lang.String)
comment36.text=\ finds\ a\ KintermEntry\ term\ in\ the\ same\ Container\ that\ has\ name\ X.\r\n\ @param\ name\ The\ string\ used\ to\ locate\ ithe\ KintermEntry\r\n\ @returns\ a\ KintermEntry\ or\ null\ if\ not\ found\r\n
comment37.params=
comment37.target=boolean\ isSelected()
comment38.params=
comment38.target=void\ doSelect()
comment39.params=
comment39.target=void\ clearSelected()
comment4.params=
comment4.target=ProductVector\ getLastProducts()
comment40.params=event
comment40.target=void\ KintermEntry_MouseReleased(java.awt.event.MouseEvent)
comment40.text=\ code\ for\ mouse\ released.\ Here,\ arbitrates\ between\ clicking\ on\ the\ text\ box,\ which\ indicates\r\n\ a\ request\ to\ edit\ the\ text\ and\ set\ parameters,\ ignore\ the\ release\ (after\ clearing\ a\ few\ variables)\r\n\ after\ dragging\ the\ component\ around\ the\ container,\ and\ terminating\ a\ line\ that\ has\ been\ drawn\ to\r\n\ indicate\ a\ relationship.\r\n\ @param\ event\ The\ mouse\ event.\r\n\ @see\ other\ mouse\ stuff\r\n
comment41.params=event
comment41.target=void\ KintermEntry_MouseDragged(java.awt.event.MouseEvent)
comment41.text=\ Code\ for\ mouse\ dragged.\ Here,\ arbitrates\ between\ dragging\ the\ component\ around\ the\ container,\ or\r\n\ drawing\ a\ line\ that\ \ indicates\ a\ relationship.\r\n\ @param\ event\ The\ mouse\ event.\r\n\ @see\ other\ mouse\ stuff\r\n
comment42.params=t
comment42.target=void\ hilight(boolean)
comment43.params=
comment43.target=KintermEntry\ intersectOthers()
comment44.params=event
comment44.target=void\ KintermEntry_MousePressed(java.awt.event.MouseEvent)
comment44.text=\ Code\ for\ mouse\ pressed.\ Here,\ arbitrates\ between\ clicking\ in\ the\ text,\ (indicating\ an\ edit\ to\ release)\r\n\ indicating\ that\ we\ want\ to\ drag\ the\ component\ around\ the\ container,\ or\r\n\ indicate\ we\ want\ to\ drawa\ line\ that\ \ indicates\ a\ relationship.\r\n\ @param\ event\ The\ mouse\ event.\r\n\ @see\ other\ mouse\ stuff\r\n
comment45.params=gt
comment45.target=int\ isProduct(KintermEntry)
comment46.params=gt\ arrow
comment46.target=int\ isProduct(KintermEntry,\ int)
comment47.params=k\ g\ arrow
comment47.target=void\ setTo(KintermEntry,\ KintermEntry,\ int)
comment48.params=gt\ pr\ arrow
comment48.target=void\ addProduct(KintermEntry,\ KintermEntry,\ int)
comment49.params=k
comment49.target=void\ setFrom(KintermEntry)
comment49.text=\ makes\ list\ of\ terms\ that\ reference\ this\ term\r\n\ \ \ @param\ k\ The\ term\ that\ references\ us\r\n
comment5.params=pv
comment5.target=void\ setLastProducts(ProductVector)
comment50.params=k
comment50.target=void\ removeTerm(KintermEditObject)
comment50.text=\ removes\ a\ term\ from\ the\ set\ of\ links\ from\ this\ term\r\n\ \ \ @param\ k\ The\ term\ to\ remove\r\n
comment51.params=k\ prod
comment51.target=void\ removeTerm(KintermEditObject,\ Product)
comment51.text=\ removes\ a\ term\ and\ product\ from\ the\ set\ of\ links\ from\ this\ term\r\n\ \ \ @param\ k\ The\ term\ to\ remove\r\n\ @param\ prod\ The\ product\r\n
comment52.params=k
comment52.target=int\ countTo(KintermEditObject)
comment53.params=k
comment53.target=void\ removeFrom(KintermEditObject)
comment53.text=\ \ public\ void\ removeFrom(KintermEntry\ k)\ {\r\n\ \ \ \ \ \ \ \ for(int\ i\=from.size()-1;i>\=0;i--)\ {\r\n\ \ \ \ \ \ \ \ \ \ \ \ System.out.println("From\:\ "+from.elementAt(i).toString());\r\n\ \ \ \ \ \ \ \ \ \ \ \ if\ (from.indexOf(k)\ \!\=\ -1)\ from.removeElement(k);\r\n\ \ \ \ \ \ \ \ }\r\n\ \ \ \ }\r\n
comment54.params=
comment54.target=void\ delete()
comment54.text=\ removes\ all\ references\ to\ this\ term\ as\ a\ generator\ or\ link\r\n
comment55.params=theColour
comment55.target=void\ setTheColour(java.awt.Color)
comment55.text=\ sets\ the\ colour\ for\ this\ term\r\n\ \ \ @param\ theColour\ The\ colour\ to\ use\r\n
comment56.params=
comment56.target=java.awt.Color\ getTheColour()
comment56.text=\ gets\ the\ colour\ used\ for\ this\ term\r\n\ \ \ @return\ theColour\ The\ colour\ used\r\n
comment57.params=
comment57.target=int\ getOrientation()
comment58.params=subSex
comment58.target=void\ setSubSex(int)
comment59.params=
comment59.target=int\ getSubSex()
comment6.params=term\ isGenerator
comment6.target=KintermEntry(java.lang.String,\ boolean)
comment6.text=\ @param\ term\ The\ kinship\ term\r\n\ @param\ isGenerator\ This\ is\ a\ generating\ element.\r\n\ should\ be\ sure\ to\ do\ setOrientation()\ to\ make\ this\ an\ active\ generator\ for\ all\ terms.\r\n\ @see\ \#setOrientation;\r\n
comment60.params=
comment60.target=TransferKinInfo\ toKinTermInfo()
comment60.text=\ need\ to\ check\ and\ make\ sure\ that\ this\ is\ compatible\ with\ the\ term\ reference\ switching\r\n\ also\ that\ we\ are\ saving\ enough\ information\r\n
comment61.params=
comment61.target=java.lang.String\ toString()
comment62.params=
comment62.target=boolean\ isFirstTime()
comment63.params=b
comment63.target=void\ setIsCovered(BooleanSwitch)
comment64.params=
comment64.target=boolean\ isCovered()
comment65.params=coveringTerm
comment65.target=void\ setCoveringTerm(java.lang.String)
comment66.params=coveredTerms
comment66.target=void\ setCoveredTerms(StringVector)
comment67.params=etc
comment67.target=void\ setEtc(boolean)
comment67.text=\ \ \ public\ void\ setDropMerge(boolean\ dm)\ {\r\n\ \ \ \ \ \ this.dropMerge\ \=\ dm;\r\n\ \ \ }\r\n\ \ \ \r\n\ \ \ public\ boolean\ isDropMerge()\ {\r\n\ \ \ \ \ \ return\ dropMerge;\r\n\ \ \ }\r\n
comment68.params=
comment68.target=boolean\ isEtc()
comment69.params=theVariables
comment69.target=void\ setTheVariables(Variables)
comment7.params=comp\ constraints\ index
comment7.target=void\ addImpl(java.awt.Component,\ java.lang.Object,\ int)
comment7.text=\r\n\ We\ override\ this\ method\ so\ that\ nothing\ gets\ added\ to\ this\ component\r\n\ @param\ comp\ the\ component\ to\ be\ added\r\n\ @param\ constraints\ an\ object\ expressing\ layout\ contraints\ for\ this\r\n\ component\r\n\ @param\ index\ the\ position\ in\ the\ container's\ list\ at\ which\ to\r\n\ insert\ the\ component.\ \ -1\ means\ insert\ at\ the\ end.\r\n\ @see\ \#remove\r\n\ @see\ LayoutManager\r\n
comment70.params=
comment70.target=Variables\ getTheVariables()
comment71.params=arrow\ k
comment71.target=ListVector\ findPossibleGenerators(int,\ KintermEntry)
comment8.params=flag
comment8.target=void\ setDrawFlag(boolean)
comment9.params=theTerm
comment9.target=void\ setTheTerm(java.lang.String)
comment9.text=\ set\ the\ kinship\ term.\r\n\ @param\ theTerm\ the\ kinship\ term\r\n
numComments=72
