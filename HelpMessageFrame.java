/*
	A basic extension of the java.awt.Frame class
 */

//import symantec.itools.awt.ImageButton;
import ice.htmlbrowser.Browser;
import ice.htmlbrowser.ICEBrowser;
import java.awt.*;

public class HelpMessageFrame extends Frame implements MessageAction
{
	public HelpMessageFrame()
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		setLayout(new BorderLayout(0,0));
		setSize(848,613);
		// browser1 = new ice.htmlbrowser.Browser();
		// browser1.setDocumentTitle("");
		// browser1.setStatusString("Status +++++");
		// browser1.setBounds(0,193,848,361);
		// add("Center", browser1);
		// browser1.setCursor(new Cursor(Cursor.HAND_CURSOR));
		panel2 = new java.awt.Panel();
		panel2.setLayout(null);
		panel2.setBounds(0,0,848,193);
		add("North", panel2);
		actionButton = new java.awt.Button();
		actionButton.setLabel("More");
		actionButton.setBounds(555,38,60,26);
		panel2.add(actionButton);
		seeAlsoPanel = new java.awt.Panel();
		seeAlsoPanel.setLayout(new FlowLayout(FlowLayout.CENTER,5,5));
		seeAlsoPanel.setBounds(467,125,290,35);
		panel2.add(seeAlsoPanel);
		iconCanvas = new java.awt.Canvas();
		iconCanvas.setBounds(11,77,48,48);
		panel2.add(iconCanvas);
		summaryTextArea = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_VERTICAL_ONLY);
		summaryTextArea.setEditable(false);
		summaryTextArea.setBounds(71,76,500,53);
		summaryTextArea.setFont(new Font("Serif", Font.BOLD, 12));
		summaryTextArea.setForeground(new Color(4210752));
		panel2.add(summaryTextArea);
		summaryTextArea.setCursor(new Cursor(Cursor.HAND_CURSOR));
		oneLineAlertLabel = new java.awt.Label("text");
		oneLineAlertLabel.setBounds(20,39,500,23);
		oneLineAlertLabel.setFont(new Font("Serif", Font.PLAIN, 12));
		oneLineAlertLabel.setForeground(new Color(255));
		panel2.add(oneLineAlertLabel);
		priorityLabel = new java.awt.Label("Hi",Label.RIGHT);
		priorityLabel.setBounds(712,7,40,23);
		panel2.add(priorityLabel);
		kindLabel = new java.awt.Label("Message",Label.CENTER);
		kindLabel.setBounds(294,6,124,25);
		kindLabel.setForeground(new Color(4210752));
		panel2.add(kindLabel);
		panel1 = new java.awt.Panel();
		panel1.setLayout(null);
		panel1.setBounds(0,554,848,59);
		add("South", panel1);
		dismissButton = new java.awt.Button();
		dismissButton.setLabel("Dismiss");
		dismissButton.setBounds(629,11,66,34);
		panel1.add(dismissButton);
		backButton = new ImageButton();
		try {
			//backButton.setImageURL(RelativeURL.getURL("KaesHelp/backarrow.gif"));
			backButton.setResourceURL("KaesHelp/backarrow.gif");
		}
		catch (Exception error) { }
		backButton.setBounds(36,10,44,44);
		panel1.add(backButton);
		label1 = new java.awt.Label("Help Window",Label.CENTER);
		label1.setBounds(233,4,279,22);
		label1.setFont(new Font("Serif", Font.PLAIN, 24));
		panel1.add(label1);
		setTitle("Message");
		//}}

		//{{INIT_MENUS
		//}}

		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		dismissButton.addActionListener(lSymAction);
		//helpMenuItem.addActionListener(lSymAction);
		//}}
		try {
			String lx = System.getProperty("user.dir");
			// browser1.setDocumentBaseString(getClass().getResource("KaesHelp").toString());
			
			// browser1.setCurrentLocation("KaesHelp/Analyze.html");
		} catch (Exception e) {e.printStackTrace();}
		
		makeMenus = new MakeMenus();
		//	makeMenus.mainmenuBar.add(GlobalWindowManager.windowsMenu);
		setMenuBar(makeMenus.mainmenuBar);
	}

	MakeMenus makeMenus;
	
	public HelpMessageFrame(String title)
	{
		this();
		setTitle(title);
	}

	public void setMessageRef(Message m) {
		messageRef = m;
		setMessageAlert(getMessageAlert());
		setMessageURL(m.getMessageURL());
		setMessageLevel(m.getMessageLevel());
		setMessageSummary(m.getMessageSummary());
		setMessageAction(m.getMessageAction());
	}
	
    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	// ice.htmlbrowser.Browser browser1;
	java.awt.Panel panel2;
	java.awt.Button actionButton;
	java.awt.Panel seeAlsoPanel;
	java.awt.Canvas iconCanvas;
	java.awt.TextArea summaryTextArea;
	java.awt.Label oneLineAlertLabel;
	java.awt.Label priorityLabel;
	java.awt.Label kindLabel;
	java.awt.Panel panel1;
	java.awt.Button dismissButton;
	ImageButton backButton;
	java.awt.Label label1;
	//}}

	//{{DECLARE_MENUS
	//}}

	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == HelpMessageFrame.this)
				HelpFrame_WindowClosing(event);
		}
	}
	
	void HelpFrame_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
	}

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == dismissButton)
				dismissButton_ActionPerformed(event);
			else if (object == actionButton)
				actionButton_ActionPerformed(event);
		//	else if (object == helpMenuItem)
		//		helpMenuItem_ActionPerformed(event);
		}
	}

	void dismissButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION 
		// Hide the HelpFrame
		setVisible(false);
		//}}
	}
	
	public void doHelp(String helpItem) {
		if (helpItem != null)
			try {
				// browser1.setCurrentLocation(helpItem+".html");
			} catch (Exception e) {e.printStackTrace();}
		
		show();
	}
	
	public void setMessageAlert(String messageTitle) {
		messageRef.messageTitle = messageTitle;
		oneLineAlertLabel.setText(messageTitle);
	}

	public String getMessageAlert() {
		return messageRef.messageTitle;
	}

	public void setMessageLevel(int messageLevel) {
		messageRef.messageLevel = messageLevel;
		priorityLabel.setText(messageLevel+"");
	}

	public int getMessageLevel() {
		return messageRef.messageLevel;
	}

	public void setMessageSummary(String messageSummary) {
		messageRef.messageSummary = messageSummary;
		summaryTextArea.setText(messageSummary);
	}

	public String getMessageSummary() {
		return messageRef.messageSummary;
	}

	public void setMessageAction(MessageAction messageAction) {
		messageRef.messageAction = messageAction;
	}

	public Object getMessageAction() {
		return messageRef.messageAction;
	}

	public void setMessageAlert(boolean messageAlert) {
		messageRef.messageAlert = messageAlert;
	}

	public boolean isMessageAlert() {
		return messageRef.messageAlert;
	}

	public void setMessageIcon(java.net.URL messageIcon) {
		messageRef.messageIcon = messageIcon;
	}

	public java.net.URL getMessageIcon() {
		return messageRef.messageIcon;
	}

	/** 
     * Returns the minimum size of this container.  
     * @see #getPreferredSize
     */
    public Dimension getMinimumSize() {
		java.awt.Dimension supersResult = super.getMinimumSize();

		// to do: place event handler code here.
		// modify the return from the super, or return your own result

		return supersResult;
	}

	/** 
     * Returns the preferred size of this container.  
     * @see #getMinimumSize
     */
    public Dimension getPreferredSize() {
		java.awt.Dimension supersResult = super.getPreferredSize();

		// to do: place event handler code here.
		// modify the return from the super, or return your own result

		return supersResult;
	}

	protected Message messageRef=null;

	public void setActionLabel(String actionLabel) {
		messageRef.actionLabel = actionLabel;
		actionButton.setLabel(actionLabel);
	}

	public String getActionLabel() {
		return messageRef.actionLabel;
	}

	void actionButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		//{{CONNECTION
		if (messageRef.messageAction != null)
			messageRef.messageAction.go(messageRef);
		//}}
	}

	/** 
     * Paints the container.  This forwards the paint to any lightweight components 
     * that are children of this container.  If this method is reimplemented, 
     * super.paint(g) should be called so that lightweight components are properly
     * rendered.  If a child component is entirely clipped by the current clipping
     * setting in g, paint() will not be forwarded to that child.
     *
     * @param g the specified Graphics window
     * @see   java.awt.Component#update(java.awt.Graphics)
     */

	public void setKindOfMessage(String kindOfMessage) {
		messageRef.kindOfMessage = kindOfMessage;
		kindLabel.setText(kindOfMessage);
	}

	public String getKindOfMessage() {
		return messageRef.kindOfMessage;
	}

	public void addSeeAlso(String url) {
		
	}
	
	public void go(Message m) {
		setMessageRef(m);
		doHelp(m.getMessageURL());
	}

	public void setMessageURL(String messageURL) {
		messageRef.messageURL = messageURL;
	}

	public String getMessageURL() {
		return messageRef.messageURL;
	}

	
}
