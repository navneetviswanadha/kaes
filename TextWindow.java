/*
	A basic extension of the java.awt.Frame class
 */

import java.awt.*;

public class TextWindow extends ProtoFrame
{
	public TextWindow(String title, String description, String content)
	{
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		//{{INIT_CONTROLS
		GridBagLayout gridBagLayout;
		gridBagLayout = new GridBagLayout();
		setLayout(gridBagLayout);
		setVisible(false);
		setSize(544,557);
		titleLabel = new java.awt.Label("Title",Label.CENTER);
		titleLabel.setBounds(0,0,544,33);
		titleLabel.setFont(new Font("Dialog", Font.PLAIN, 18));
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.weightx = 0.5;
		gbc.anchor = GridBagConstraints.NORTH;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		gbc.insets = new Insets(0,0,0,0);
		((GridBagLayout)getLayout()).setConstraints(titleLabel, gbc);
		add(titleLabel);
		contentText = new java.awt.TextArea("",0,0,TextArea.SCROLLBARS_VERTICAL_ONLY);
		contentText.setBounds(0,33,544,524);
		contentText.setFont(new Font("Serif", Font.PLAIN, 14));
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 1;
		gbc.weightx = 0.5;
		gbc.weighty = 0.5;
		gbc.anchor = GridBagConstraints.SOUTH;
		gbc.fill = GridBagConstraints.BOTH;
		gbc.insets = new Insets(0,0,0,0);
		((GridBagLayout)getLayout()).setConstraints(contentText, gbc);
		add(contentText);
		setTitle("Report");
		//}}

		//{{INIT_MENUS
	//	mainmenuBar = new java.awt.MenuBar();
	//	setMenuBar(mainmenuBar);
		//$$ mainmenuBar.move(0,0);
		//}}

		//{{REGISTER_LISTENERS
	//	SymWindow aSymWindow = new SymWindow();
	//	this.addWindowListener(aSymWindow);
		//}}
		setTitle(title);
		contentText.setText(content);
		titleLabel.setText(description);
	//	GlobalWindowManager.addWindow(this);
	//	mainmenuBar.add(GlobalWindowManager.windowsMenu);
		this.setVisible(true);
		this.toFront();
}

	public TextWindow(String title)
	{
		this(title,title,"");
	}

	public TextWindow(String title, String description)
	{
		this(title,description,"");
	}

	public TextWindow()
	{
		this("Text Window", "Text","");
		
	}

	public void setText(String text) {
		contentText.setText(text);
	}

	public void setDescription(String text) {
		titleLabel.setText(text);
	}
	
	public synchronized void dispose() {
		GlobalWindowManager.removeWindow(this);
		super.dispose();
	}

    /**
     * Shows or hides the component depending on the boolean flag b.
     * @param b  if true, show the component; otherwise, hide the component.
     * @see java.awt.Component#isVisible
     */
    public void setVisible(boolean b)
	{
		if(b)
		{
			setLocation(50, 50);
		}
		super.setVisible(b);
	}

	public void addNotify()
	{
	    // Record the size of the window prior to calling parents addNotify.
	    Dimension d = getSize();
	    
		super.addNotify();

		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		setSize(insets().left + insets().right + d.width, insets().top + insets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets().left, insets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}

    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	//{{DECLARE_CONTROLS
	java.awt.Label titleLabel;
	java.awt.TextArea contentText;
	//}}
	
	void onevent_WindowClosing(java.awt.event.WindowEvent event)
	{
		setVisible(false);		 // hide the Frame
		dispose();
	}
}
