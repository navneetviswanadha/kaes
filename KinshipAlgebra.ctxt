#BlueJ class context
comment0.target=KinshipAlgebra
comment0.text=\ history\r\n\ 5/29\ DR\ added\ "progress.addElement(gen);"\ to\ if\ clause\:\ "if\ (theProd.size()\ \=\=\ 0)"\r\n\ in\ procedure\ checkRecursivePath\r\n\ 5/31\ DR\ rewrote\ checkRecursivePath\ to\ search\ for\ term\ product\ loops\ outward\ with\ gen\r\n\ and\ back\ with\ genr\ so\ that\ equations\ of\ form\ CCPP\=CP\ can\ be\ found;\ added\ other\ conditions\r\n\ that\ must\ be\ satisfied\ prior\ to\ searching\ for\ loops\r\n\ all\ loops\ in\ the\ form\ of\ equations\ returned\ in\ a\ single\ vector\r\n\ 7/15\ DR\ replace\ getElement\ with\ findElement\ in\ checkRecursivePath;\ added\ checks\ in\ case\ a\r\n\ null\ element\ is\ returned\r\n\ 10/15\ DR\ change\ <\=\ to\ <\ in\ for(int\ i\=0;i<ndx;i++)//should\ this\ be\ i\ ,ndx\ or\ i<\=ndx?\r\n\ in\ checkRecursivePath;\ this\ may\ be\ a\ problem\ but\ it\ works\ for\ Shipibo\r\n\ 11/11\ move\ all\ Arrow\ procedures\ to\ Algebra\r\n\ 11/10/02\ DR\ added\ procedure\ checkParentSibPath(String\ prod,\ String\ gen,\ TransferKinInfoVector\ kv)\r\n
comment1.params=k
comment1.target=KinshipAlgebra(TransferKinInfoVector)
comment10.params=gen
comment10.target=ListVector\ checkRecursivePath(java.lang.String)
comment10.text=\ returns\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n\ starts\ implicitly\ from\ a\ focal\ term\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment11.params=prod\ gen
comment11.target=ListVector\ checkRecursivePath(java.lang.String,\ java.lang.String)
comment11.text=\ returns\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n\ @param\ prod\ The\ term\ to\ start\ from\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment12.params=prod\ gen\ kv
comment12.target=ListVector\ checkRecursivePath(java.lang.String,\ java.lang.String,\ TransferKinInfoVector)
comment12.text=\ returns\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n\ @param\ prod\ The\ term\ to\ start\ from\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @param\ kv\ the\ TransferKinInfoVector\ to\ use\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment13.params=istop\ progress\ prod\ gen\ genr\ kv
comment13.target=ListVector\ _checkRecursivePath(int,\ StringVector,\ java.lang.String,\ java.lang.String,\ java.lang.String,\ TransferKinInfoVector)
comment14.params=gen
comment14.target=ListVector\ checkParentSibPath(java.lang.String)
comment14.text=\ returns\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n\ starts\ implicitly\ from\ a\ focal\ term\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment15.params=prod\ gen
comment15.target=ListVector\ checkParentSibPath(java.lang.String,\ java.lang.String)
comment15.text=\ returns\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n\ @param\ prod\ The\ term\ to\ start\ from\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment16.params=prod\ gen\ kv
comment16.target=ListVector\ checkParentSibPath(java.lang.String,\ java.lang.String,\ TransferKinInfoVector)
comment16.text=\ returns\ lhs\ and\ rhs\ of\ "parent\ of\ sib"\ equation\ as\ StringVectors\r\n\ @param\ prod\ The\ term\ to\ start\ from\r\n\ @param\ gen\ the\ generator\ to\ follow\r\n\ @param\ kv\ the\ TransferKinInfoVector\ to\ use\r\n\ @return\ The\ lhs\ and\ rhs\ of\ recursive\ clip\ equation\ as\ StringVectors\r\n
comment17.params=kv
comment17.target=void\ setKv(TransferKinInfoVector)
comment17.text=\tListVector\ checkRecursivePathXX(String\ prod,\ String\ gen,\ TransferKinInfoVector\ kv)\ {\r\n\t\tDebug.prout(6,"checkRecursivePath\ \:"+gen);\r\n\t\tListVector\ ret\ \=\ new\ ListVector();\r\n\t\tStringVector\ theSide\ \=\ new\ StringVector();\r\n\t\tStringVector\ progress\ \=\ new\ StringVector();\r\n\t\t//progress.addElement(gen);\r\n\t\tStringVector\ theProd\=null;\r\n\t\tTransferKinInfo\ kk;\r\n\t\tfor(;;)\ {\r\n\t\t\tif\ ((\ kk\ \=\ kv.lookupTerm(prod))\ \=\=\ null)\ {\r\n\t\t\t\tthrow\ new\ KintermMapException(44,"KinshipAlgebra\:\ checkRecursivePath\ -\ lookupTerm\ failed\ to\ find\ term\="+prod);\r\n\t\t\t}\r\n\t\t\t\ if\ (\ kk.isEtc())\ return\ ret;\ //\ don't\ limit\ path\ size\ based\ on\ kin\ term\ map\r\n\t\t\ttheProd\ \=\ kv.getEffectiveProducts(prod,gen);\r\n\t\t//\tSystem.out.println("theProd\ \:"+theProd.toString());\r\n\t\t\tif\ (theProd.size()\ \=\=\ 0)\ {\r\n\t\t\t\ \ \ \ progress.addElement(gen);\r\n\t\t\t\tfor(int\ i\=0;i<\=\ progress.size();i++)\r\n\t\t\t\t\ttheSide.addElement(gen);\r\n\t\t\t\tret.addElement(theSide);\r\n\t\t\t\tret.addElement(new\ StringVector());\ //\ Empty\ list\ means\ null\ equation\ --\ not\ a\ kin\ term\r\n\t\t\t\treturn\ ret;\r\n\t\t\t}\ else\ if\ (theProd.size()\ >\ 1)\ {\r\n\t\t\t\treturn\ ret;\ //\ not\ very\ adequate\ ++++++\r\n\t\t\t}\r\n\r\n\t\t\tprod\=\ theProd.getSymbol(0);\r\n\t\t//\ System.out.println("Made\ it\ to\ second\ side\!\!\!");\r\n\t\t\tint\ ndx;\r\n\t\t\tif\ ((ndx\ \=\ progress.indexOf(prod))\ \!\=\ -1)\ {\r\n\t\t\t\tfor(int\ i\=0;i<\=\ progress.size();i++)\r\n\t\t\t\t\ttheSide.addElement(gen);\r\n\t\t\t\tret.addElement(theSide);\r\n\t\t\t\tStringVector\ otherSide\ \=\ new\ StringVector();\r\n\t\t\t\tfor(int\ i\=0;i<\=ndx;i++)\r\n\t\t\t\t\totherSide.addElement(gen);\r\n\t\t\t\tret.addElement(otherSide);\r\n\t\t\t\treturn\ ret;\r\n\t\t\t}\r\n\t\t\tprogress.addElement(prod);\r\n\t\t\t//\ build\ up\ left\ hand\ side\ copy\ old\ lhs\ to\ rhs\ before\ product\r\n\t\t}\r\n\t}\r\n\r\n
comment18.params=
comment18.target=TransferKinInfoVector\ getKv()
comment19.params=
comment19.target=AlgebraSymbolVector\ getAlgebraSymbols()
comment2.params=
comment2.target=boolean\ establishBaseGenerators()
comment2.text=\ checks\ to\ see\ if\ the\ base\ generators\ are\ present\ in\ the\ kinterm\ map\r\n\tand\ establishes\ these\ in\ the\ algebra\ via\ MakeAlgebra\ if\ necessary\r\n\ @see\ MakeAlgebra\r\n\ @\ return\ true\ if\ base\ generators\ established\r\n\ does\ not\ check\ to\ see\ if\ this\ step\ is\ needed\ or\ has\ already\ been\ done\r\n
comment3.params=
comment3.target=boolean\ establishReciprocalsForGenerators()
comment4.params=gen
comment4.target=ListVector\ checkGeneratorForReciprocal(java.lang.String)
comment5.params=
comment5.target=boolean\ establishIdentityTerm()
comment6.params=
comment6.target=StringVector\ getFocalTerms()
comment7.params=term
comment7.target=boolean\ isFocalTerm(java.lang.String)
comment8.params=
comment8.target=java.lang.String\ getIdentityTerm()
comment8.text=\ finds\ the\ identity\ element,\ if\ any\r\n\ @return\ the\ identity\ element\ if\ found,\ null\ if\ not\r\n
comment9.params=
comment9.target=boolean\ addIdentityTerm()
numComments=20
