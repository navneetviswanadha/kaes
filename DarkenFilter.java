//package symantec.itools.awt.image;import java.awt.image.RGBImageFilter;import java.awt.image.ColorModel;import java.awt.image.DirectColorModel;import java.lang.IllegalArgumentException;// Written by Levi Brown and Micheal Hopkins 1.1, July 8, 1997./** * An Image filter to use for darkening an Image a specified percentage. * @version 1.1, July 8, 1997 * @author  Symantec */public class DarkenFilter extends RGBImageFilter{	/**	 * Constructs a default DarkenFilter.	 * By default the Image is darkened 50%.	 * @see #DarkenFilter(double)	 * @see #setPercent	 */	public DarkenFilter()	{		this(0.50);	}	/**	 * Constructs a DarkenFilter.	 * @param percent the percent to darken the image when filtering.	 * @see #DarkenFilter()	 * @see #setPercent	 */	public DarkenFilter(double percent)	{		canFilterIndexColorModel = true;		try		{			setPercent(percent);		}		catch (IllegalArgumentException exc)		{			System.err.println("DarkenFilter: Invalid parameter value passed to constructor:");			System.err.println("     " + percent + " is not a valid percentage value. It should be <= 1 && >= 0");			System.err.println("     Defaulting to 0.50.");			try { setPercent(0.50); } catch (IllegalArgumentException exc2) {}		}	}	/**	 * Sets the percentage to fade when filtering.	 * @param percent the percentage to fade.	 * @exception IllegalArgumentException	 * if the specified percentage value is unacceptable	 * @see #getPercent	 */	public void setPercent(double percent) throws IllegalArgumentException	{		GeneralUtils.checkValidPercent(percent);		this.percent = percent;	}	/**	 * Gets the percentage to fade when filtering.	 * @return the percentage to fade.	 * @see #setPercent	 */	public double getPercent()	{		return percent;	}	/**	 * Filters an RGB value by the current fade percentage.	 * @param x unused	 * @param y unused	 * @param rgb the rgb value to fade	 * @return the faded rgb value	 */	public int filterRGB( int x, int y, int rgb )	{		DirectColorModel cm = (DirectColorModel)ColorModel.getRGBdefault();		int alpha = cm.getAlpha(rgb);		int red   = cm.getRed(rgb);		int green = cm.getGreen(rgb);		int blue  = cm.getBlue(rgb);		red		= Math.max((int)(red	* (1 - percent)), 0);		green	= Math.max((int)(green	* (1 - percent)), 0);		blue	= Math.max((int)(blue	* (1 - percent)), 0);		alpha	= alpha << 24;		red		= red   << 16;		green	= green << 8;		return alpha | red | green | blue;	}	/**	 * The percentage to fade when filtering.	 * @see #getPercent	 * @see #setPercent	 */	protected double percent;}
